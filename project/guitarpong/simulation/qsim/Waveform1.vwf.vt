// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2019 22:29:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          skeleton
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module skeleton_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg movedown;
reg moveleft;
reg moveright;
reg moveup;
reg p1b1;
reg p1b2;
reg p1b3;
reg p1ls;
reg p2b1;
reg p2b2;
reg p2b3;
reg p2ls;
// wires                                               
wire [7:0] VGA_B;
wire VGA_BLANK;
wire VGA_CLK;
wire [7:0] VGA_G;
wire VGA_HS;
wire [7:0] VGA_R;
wire VGA_SYNC;
wire VGA_VS;
wire [11:0] address_imem;
wire [31:0] ball;
wire [10:0] ball_x_pos;
wire [10:0] ball_y_pos;
wire button_trig;
wire clock;
wire ctrl_writeEnable;
wire [4:0] ctrl_writeReg;
wire [31:0] data_writeReg;
wire [31:0] in_out;
wire [31:0] notes1;
wire [31:0] notes2;

// assign statements (if any)                          
skeleton i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.VGA_B(VGA_B),
	.VGA_BLANK(VGA_BLANK),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC(VGA_SYNC),
	.VGA_VS(VGA_VS),
	.address_imem(address_imem),
	.ball(ball),
	.ball_x_pos(ball_x_pos),
	.ball_y_pos(ball_y_pos),
	.button_trig(button_trig),
	.clock(clock),
	.ctrl_writeEnable(ctrl_writeEnable),
	.ctrl_writeReg(ctrl_writeReg),
	.data_writeReg(data_writeReg),
	.in_out(in_out),
	.movedown(movedown),
	.moveleft(moveleft),
	.moveright(moveright),
	.moveup(moveup),
	.notes1(notes1),
	.notes2(notes2),
	.p1b1(p1b1),
	.p1b2(p1b2),
	.p1b3(p1b3),
	.p1ls(p1ls),
	.p2b1(p2b1),
	.p2b2(p2b2),
	.p2b3(p2b3),
	.p2ls(p2ls)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
initial
begin
	CLOCK_50 = 1'b1;
	# 10000;
	repeat(49)
	begin
		CLOCK_50 = 1'b0;
		CLOCK_50 = #10000 1'b1;
		# 10000;
	end
	CLOCK_50 = 1'b0;
end 

// moveleft
initial
begin
	moveleft = 1'b1;
	moveleft = #70000 1'b0;
	moveleft = #10000 1'b1;
	moveleft = #80000 1'b0;
	moveleft = #70000 1'b1;
	moveleft = #80000 1'b0;
	moveleft = #70000 1'b1;
	moveleft = #70000 1'b0;
	moveleft = #10000 1'b1;
	moveleft = #510000 1'b0;
end 
endmodule

