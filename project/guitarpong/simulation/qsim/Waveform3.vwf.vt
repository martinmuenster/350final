// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/21/2019 22:01:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] c;
reg [18:0] in0;
reg [18:0] in1;
reg [18:0] in2;
reg [18:0] in3;
reg [18:0] in4;
reg [18:0] in5;
reg [18:0] in6;
reg [18:0] in7;
reg [18:0] in8;
reg [18:0] in9;
reg [18:0] in10;
reg [18:0] in11;
// wires                                               
wire [18:0] out;

// assign statements (if any)                          
mux_16 i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.in0(in0),
	.in1(in1),
	.in2(in2),
	.in3(in3),
	.in4(in4),
	.in5(in5),
	.in6(in6),
	.in7(in7),
	.in8(in8),
	.in9(in9),
	.in10(in10),
	.in11(in11),
	.out(out)
);
initial 
begin 
#1000000 $finish;
end 
// c[ 11 ]
initial
begin
	c[11] = 1'b0;
	c[11] = #90000 1'b1;
	c[11] = #40000 1'b0;
end 
// c[ 10 ]
initial
begin
	c[10] = 1'b0;
	c[10] = #300000 1'b1;
	c[10] = #30000 1'b0;
end 
// c[ 9 ]
initial
begin
	c[9] = 1'b0;
	c[9] = #510000 1'b1;
	c[9] = #30000 1'b0;
	c[9] = #100000 1'b1;
	c[9] = #30000 1'b0;
end 
// c[ 8 ]
initial
begin
	c[8] = 1'b0;
	c[8] = #200000 1'b1;
	c[8] = #40000 1'b0;
	c[8] = #270000 1'b1;
	c[8] = #30000 1'b0;
end 
// c[ 7 ]
initial
begin
	c[7] = 1'b0;
	c[7] = #30000 1'b1;
	c[7] = #40000 1'b0;
	c[7] = #440000 1'b1;
	c[7] = #30000 1'b0;
end 
// c[ 6 ]
initial
begin
	c[6] = 1'b0;
	c[6] = #510000 1'b1;
	c[6] = #30000 1'b0;
end 
// c[ 5 ]
initial
begin
	c[5] = 1'b0;
	c[5] = #510000 1'b1;
	c[5] = #30000 1'b0;
end 
// c[ 4 ]
initial
begin
	c[4] = 1'b0;
end 
// c[ 3 ]
initial
begin
	c[3] = 1'b0;
	c[3] = #140000 1'b1;
	c[3] = #20000 1'b0;
end 
// c[ 2 ]
initial
begin
	c[2] = 1'b0;
	c[2] = #600000 1'b1;
	c[2] = #50000 1'b0;
end 
// c[ 1 ]
initial
begin
	c[1] = 1'b0;
	c[1] = #280000 1'b1;
	c[1] = #40000 1'b0;
	c[1] = #280000 1'b1;
	c[1] = #50000 1'b0;
end 
// c[ 0 ]
initial
begin
	c[0] = 1'b0;
	c[0] = #430000 1'b1;
	c[0] = #50000 1'b0;
end 
// in0[ 18 ]
initial
begin
	in0[18] = 1'b0;
end 
// in0[ 17 ]
initial
begin
	in0[17] = 1'b0;
end 
// in0[ 16 ]
initial
begin
	in0[16] = 1'b0;
end 
// in0[ 15 ]
initial
begin
	in0[15] = 1'b0;
end 
// in0[ 14 ]
initial
begin
	in0[14] = 1'b0;
end 
// in0[ 13 ]
initial
begin
	in0[13] = 1'b0;
end 
// in0[ 12 ]
initial
begin
	in0[12] = 1'b0;
end 
// in0[ 11 ]
initial
begin
	in0[11] = 1'b0;
end 
// in0[ 10 ]
initial
begin
	in0[10] = 1'b0;
end 
// in0[ 9 ]
initial
begin
	in0[9] = 1'b0;
end 
// in0[ 8 ]
initial
begin
	in0[8] = 1'b0;
end 
// in0[ 7 ]
initial
begin
	in0[7] = 1'b0;
end 
// in0[ 6 ]
initial
begin
	in0[6] = 1'b0;
end 
// in0[ 5 ]
initial
begin
	in0[5] = 1'b0;
end 
// in0[ 4 ]
initial
begin
	in0[4] = 1'b1;
end 
// in0[ 3 ]
initial
begin
	in0[3] = 1'b1;
end 
// in0[ 2 ]
initial
begin
	in0[2] = 1'b0;
end 
// in0[ 1 ]
initial
begin
	in0[1] = 1'b0;
end 
// in0[ 0 ]
initial
begin
	in0[0] = 1'b0;
end 
// in1[ 18 ]
initial
begin
	in1[18] = 1'b0;
end 
// in1[ 17 ]
initial
begin
	in1[17] = 1'b0;
end 
// in1[ 16 ]
initial
begin
	in1[16] = 1'b0;
end 
// in1[ 15 ]
initial
begin
	in1[15] = 1'b0;
end 
// in1[ 14 ]
initial
begin
	in1[14] = 1'b0;
end 
// in1[ 13 ]
initial
begin
	in1[13] = 1'b0;
end 
// in1[ 12 ]
initial
begin
	in1[12] = 1'b0;
end 
// in1[ 11 ]
initial
begin
	in1[11] = 1'b0;
end 
// in1[ 10 ]
initial
begin
	in1[10] = 1'b0;
end 
// in1[ 9 ]
initial
begin
	in1[9] = 1'b0;
end 
// in1[ 8 ]
initial
begin
	in1[8] = 1'b0;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b0;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b1;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b0;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b0;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b0;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b0;
end 
// in2[ 18 ]
initial
begin
	in2[18] = 1'b0;
end 
// in2[ 17 ]
initial
begin
	in2[17] = 1'b0;
end 
// in2[ 16 ]
initial
begin
	in2[16] = 1'b0;
end 
// in2[ 15 ]
initial
begin
	in2[15] = 1'b0;
end 
// in2[ 14 ]
initial
begin
	in2[14] = 1'b0;
end 
// in2[ 13 ]
initial
begin
	in2[13] = 1'b0;
end 
// in2[ 12 ]
initial
begin
	in2[12] = 1'b0;
end 
// in2[ 11 ]
initial
begin
	in2[11] = 1'b0;
end 
// in2[ 10 ]
initial
begin
	in2[10] = 1'b0;
end 
// in2[ 9 ]
initial
begin
	in2[9] = 1'b0;
end 
// in2[ 8 ]
initial
begin
	in2[8] = 1'b0;
end 
// in2[ 7 ]
initial
begin
	in2[7] = 1'b0;
end 
// in2[ 6 ]
initial
begin
	in2[6] = 1'b0;
end 
// in2[ 5 ]
initial
begin
	in2[5] = 1'b0;
end 
// in2[ 4 ]
initial
begin
	in2[4] = 1'b0;
end 
// in2[ 3 ]
initial
begin
	in2[3] = 1'b0;
end 
// in2[ 2 ]
initial
begin
	in2[2] = 1'b0;
end 
// in2[ 1 ]
initial
begin
	in2[1] = 1'b0;
end 
// in2[ 0 ]
initial
begin
	in2[0] = 1'b0;
end 
// in3[ 18 ]
initial
begin
	in3[18] = 1'b0;
end 
// in3[ 17 ]
initial
begin
	in3[17] = 1'b0;
end 
// in3[ 16 ]
initial
begin
	in3[16] = 1'b0;
end 
// in3[ 15 ]
initial
begin
	in3[15] = 1'b0;
end 
// in3[ 14 ]
initial
begin
	in3[14] = 1'b0;
end 
// in3[ 13 ]
initial
begin
	in3[13] = 1'b0;
end 
// in3[ 12 ]
initial
begin
	in3[12] = 1'b0;
end 
// in3[ 11 ]
initial
begin
	in3[11] = 1'b0;
end 
// in3[ 10 ]
initial
begin
	in3[10] = 1'b0;
end 
// in3[ 9 ]
initial
begin
	in3[9] = 1'b0;
end 
// in3[ 8 ]
initial
begin
	in3[8] = 1'b0;
end 
// in3[ 7 ]
initial
begin
	in3[7] = 1'b0;
end 
// in3[ 6 ]
initial
begin
	in3[6] = 1'b0;
end 
// in3[ 5 ]
initial
begin
	in3[5] = 1'b0;
end 
// in3[ 4 ]
initial
begin
	in3[4] = 1'b0;
end 
// in3[ 3 ]
initial
begin
	in3[3] = 1'b0;
end 
// in3[ 2 ]
initial
begin
	in3[2] = 1'b0;
end 
// in3[ 1 ]
initial
begin
	in3[1] = 1'b0;
end 
// in3[ 0 ]
initial
begin
	in3[0] = 1'b0;
end 
// in4[ 18 ]
initial
begin
	in4[18] = 1'b0;
end 
// in4[ 17 ]
initial
begin
	in4[17] = 1'b0;
end 
// in4[ 16 ]
initial
begin
	in4[16] = 1'b0;
end 
// in4[ 15 ]
initial
begin
	in4[15] = 1'b0;
end 
// in4[ 14 ]
initial
begin
	in4[14] = 1'b0;
end 
// in4[ 13 ]
initial
begin
	in4[13] = 1'b0;
end 
// in4[ 12 ]
initial
begin
	in4[12] = 1'b0;
end 
// in4[ 11 ]
initial
begin
	in4[11] = 1'b0;
end 
// in4[ 10 ]
initial
begin
	in4[10] = 1'b0;
end 
// in4[ 9 ]
initial
begin
	in4[9] = 1'b0;
end 
// in4[ 8 ]
initial
begin
	in4[8] = 1'b0;
end 
// in4[ 7 ]
initial
begin
	in4[7] = 1'b0;
end 
// in4[ 6 ]
initial
begin
	in4[6] = 1'b0;
end 
// in4[ 5 ]
initial
begin
	in4[5] = 1'b0;
end 
// in4[ 4 ]
initial
begin
	in4[4] = 1'b0;
end 
// in4[ 3 ]
initial
begin
	in4[3] = 1'b0;
end 
// in4[ 2 ]
initial
begin
	in4[2] = 1'b0;
end 
// in4[ 1 ]
initial
begin
	in4[1] = 1'b0;
end 
// in4[ 0 ]
initial
begin
	in4[0] = 1'b0;
end 
// in5[ 18 ]
initial
begin
	in5[18] = 1'b0;
end 
// in5[ 17 ]
initial
begin
	in5[17] = 1'b0;
end 
// in5[ 16 ]
initial
begin
	in5[16] = 1'b0;
end 
// in5[ 15 ]
initial
begin
	in5[15] = 1'b0;
end 
// in5[ 14 ]
initial
begin
	in5[14] = 1'b0;
end 
// in5[ 13 ]
initial
begin
	in5[13] = 1'b0;
end 
// in5[ 12 ]
initial
begin
	in5[12] = 1'b0;
end 
// in5[ 11 ]
initial
begin
	in5[11] = 1'b0;
end 
// in5[ 10 ]
initial
begin
	in5[10] = 1'b0;
end 
// in5[ 9 ]
initial
begin
	in5[9] = 1'b0;
end 
// in5[ 8 ]
initial
begin
	in5[8] = 1'b0;
end 
// in5[ 7 ]
initial
begin
	in5[7] = 1'b0;
end 
// in5[ 6 ]
initial
begin
	in5[6] = 1'b0;
end 
// in5[ 5 ]
initial
begin
	in5[5] = 1'b0;
end 
// in5[ 4 ]
initial
begin
	in5[4] = 1'b0;
end 
// in5[ 3 ]
initial
begin
	in5[3] = 1'b0;
end 
// in5[ 2 ]
initial
begin
	in5[2] = 1'b0;
end 
// in5[ 1 ]
initial
begin
	in5[1] = 1'b0;
end 
// in5[ 0 ]
initial
begin
	in5[0] = 1'b0;
end 
// in6[ 18 ]
initial
begin
	in6[18] = 1'b0;
end 
// in6[ 17 ]
initial
begin
	in6[17] = 1'b0;
end 
// in6[ 16 ]
initial
begin
	in6[16] = 1'b0;
end 
// in6[ 15 ]
initial
begin
	in6[15] = 1'b0;
end 
// in6[ 14 ]
initial
begin
	in6[14] = 1'b0;
end 
// in6[ 13 ]
initial
begin
	in6[13] = 1'b0;
end 
// in6[ 12 ]
initial
begin
	in6[12] = 1'b0;
end 
// in6[ 11 ]
initial
begin
	in6[11] = 1'b0;
end 
// in6[ 10 ]
initial
begin
	in6[10] = 1'b0;
end 
// in6[ 9 ]
initial
begin
	in6[9] = 1'b0;
end 
// in6[ 8 ]
initial
begin
	in6[8] = 1'b0;
end 
// in6[ 7 ]
initial
begin
	in6[7] = 1'b0;
end 
// in6[ 6 ]
initial
begin
	in6[6] = 1'b0;
end 
// in6[ 5 ]
initial
begin
	in6[5] = 1'b0;
end 
// in6[ 4 ]
initial
begin
	in6[4] = 1'b0;
end 
// in6[ 3 ]
initial
begin
	in6[3] = 1'b0;
end 
// in6[ 2 ]
initial
begin
	in6[2] = 1'b0;
end 
// in6[ 1 ]
initial
begin
	in6[1] = 1'b0;
end 
// in6[ 0 ]
initial
begin
	in6[0] = 1'b0;
end 
// in7[ 18 ]
initial
begin
	in7[18] = 1'b0;
end 
// in7[ 17 ]
initial
begin
	in7[17] = 1'b0;
end 
// in7[ 16 ]
initial
begin
	in7[16] = 1'b0;
end 
// in7[ 15 ]
initial
begin
	in7[15] = 1'b0;
end 
// in7[ 14 ]
initial
begin
	in7[14] = 1'b1;
end 
// in7[ 13 ]
initial
begin
	in7[13] = 1'b0;
end 
// in7[ 12 ]
initial
begin
	in7[12] = 1'b0;
end 
// in7[ 11 ]
initial
begin
	in7[11] = 1'b0;
end 
// in7[ 10 ]
initial
begin
	in7[10] = 1'b0;
end 
// in7[ 9 ]
initial
begin
	in7[9] = 1'b0;
end 
// in7[ 8 ]
initial
begin
	in7[8] = 1'b0;
end 
// in7[ 7 ]
initial
begin
	in7[7] = 1'b0;
end 
// in7[ 6 ]
initial
begin
	in7[6] = 1'b0;
end 
// in7[ 5 ]
initial
begin
	in7[5] = 1'b0;
end 
// in7[ 4 ]
initial
begin
	in7[4] = 1'b0;
end 
// in7[ 3 ]
initial
begin
	in7[3] = 1'b0;
end 
// in7[ 2 ]
initial
begin
	in7[2] = 1'b0;
end 
// in7[ 1 ]
initial
begin
	in7[1] = 1'b0;
end 
// in7[ 0 ]
initial
begin
	in7[0] = 1'b0;
end 
// in8[ 18 ]
initial
begin
	in8[18] = 1'b0;
end 
// in8[ 17 ]
initial
begin
	in8[17] = 1'b0;
end 
// in8[ 16 ]
initial
begin
	in8[16] = 1'b0;
end 
// in8[ 15 ]
initial
begin
	in8[15] = 1'b0;
end 
// in8[ 14 ]
initial
begin
	in8[14] = 1'b0;
end 
// in8[ 13 ]
initial
begin
	in8[13] = 1'b1;
end 
// in8[ 12 ]
initial
begin
	in8[12] = 1'b0;
end 
// in8[ 11 ]
initial
begin
	in8[11] = 1'b0;
end 
// in8[ 10 ]
initial
begin
	in8[10] = 1'b0;
end 
// in8[ 9 ]
initial
begin
	in8[9] = 1'b0;
end 
// in8[ 8 ]
initial
begin
	in8[8] = 1'b0;
end 
// in8[ 7 ]
initial
begin
	in8[7] = 1'b0;
end 
// in8[ 6 ]
initial
begin
	in8[6] = 1'b0;
end 
// in8[ 5 ]
initial
begin
	in8[5] = 1'b0;
end 
// in8[ 4 ]
initial
begin
	in8[4] = 1'b0;
end 
// in8[ 3 ]
initial
begin
	in8[3] = 1'b0;
end 
// in8[ 2 ]
initial
begin
	in8[2] = 1'b0;
end 
// in8[ 1 ]
initial
begin
	in8[1] = 1'b0;
end 
// in8[ 0 ]
initial
begin
	in8[0] = 1'b0;
end 
// in9[ 18 ]
initial
begin
	in9[18] = 1'b0;
end 
// in9[ 17 ]
initial
begin
	in9[17] = 1'b0;
end 
// in9[ 16 ]
initial
begin
	in9[16] = 1'b0;
end 
// in9[ 15 ]
initial
begin
	in9[15] = 1'b0;
end 
// in9[ 14 ]
initial
begin
	in9[14] = 1'b0;
end 
// in9[ 13 ]
initial
begin
	in9[13] = 1'b0;
end 
// in9[ 12 ]
initial
begin
	in9[12] = 1'b0;
end 
// in9[ 11 ]
initial
begin
	in9[11] = 1'b0;
end 
// in9[ 10 ]
initial
begin
	in9[10] = 1'b0;
end 
// in9[ 9 ]
initial
begin
	in9[9] = 1'b0;
end 
// in9[ 8 ]
initial
begin
	in9[8] = 1'b0;
end 
// in9[ 7 ]
initial
begin
	in9[7] = 1'b0;
end 
// in9[ 6 ]
initial
begin
	in9[6] = 1'b0;
end 
// in9[ 5 ]
initial
begin
	in9[5] = 1'b0;
end 
// in9[ 4 ]
initial
begin
	in9[4] = 1'b0;
end 
// in9[ 3 ]
initial
begin
	in9[3] = 1'b0;
end 
// in9[ 2 ]
initial
begin
	in9[2] = 1'b0;
end 
// in9[ 1 ]
initial
begin
	in9[1] = 1'b0;
end 
// in9[ 0 ]
initial
begin
	in9[0] = 1'b0;
end 
// in10[ 18 ]
initial
begin
	in10[18] = 1'b0;
end 
// in10[ 17 ]
initial
begin
	in10[17] = 1'b0;
end 
// in10[ 16 ]
initial
begin
	in10[16] = 1'b0;
end 
// in10[ 15 ]
initial
begin
	in10[15] = 1'b0;
end 
// in10[ 14 ]
initial
begin
	in10[14] = 1'b0;
end 
// in10[ 13 ]
initial
begin
	in10[13] = 1'b0;
end 
// in10[ 12 ]
initial
begin
	in10[12] = 1'b0;
end 
// in10[ 11 ]
initial
begin
	in10[11] = 1'b1;
end 
// in10[ 10 ]
initial
begin
	in10[10] = 1'b0;
end 
// in10[ 9 ]
initial
begin
	in10[9] = 1'b0;
end 
// in10[ 8 ]
initial
begin
	in10[8] = 1'b0;
end 
// in10[ 7 ]
initial
begin
	in10[7] = 1'b0;
end 
// in10[ 6 ]
initial
begin
	in10[6] = 1'b0;
end 
// in10[ 5 ]
initial
begin
	in10[5] = 1'b0;
end 
// in10[ 4 ]
initial
begin
	in10[4] = 1'b0;
end 
// in10[ 3 ]
initial
begin
	in10[3] = 1'b0;
end 
// in10[ 2 ]
initial
begin
	in10[2] = 1'b0;
end 
// in10[ 1 ]
initial
begin
	in10[1] = 1'b0;
end 
// in10[ 0 ]
initial
begin
	in10[0] = 1'b0;
end 
// in11[ 18 ]
initial
begin
	in11[18] = 1'b0;
end 
// in11[ 17 ]
initial
begin
	in11[17] = 1'b0;
end 
// in11[ 16 ]
initial
begin
	in11[16] = 1'b0;
end 
// in11[ 15 ]
initial
begin
	in11[15] = 1'b0;
end 
// in11[ 14 ]
initial
begin
	in11[14] = 1'b0;
end 
// in11[ 13 ]
initial
begin
	in11[13] = 1'b0;
end 
// in11[ 12 ]
initial
begin
	in11[12] = 1'b0;
end 
// in11[ 11 ]
initial
begin
	in11[11] = 1'b0;
end 
// in11[ 10 ]
initial
begin
	in11[10] = 1'b0;
end 
// in11[ 9 ]
initial
begin
	in11[9] = 1'b0;
end 
// in11[ 8 ]
initial
begin
	in11[8] = 1'b0;
end 
// in11[ 7 ]
initial
begin
	in11[7] = 1'b0;
end 
// in11[ 6 ]
initial
begin
	in11[6] = 1'b0;
end 
// in11[ 5 ]
initial
begin
	in11[5] = 1'b0;
end 
// in11[ 4 ]
initial
begin
	in11[4] = 1'b0;
end 
// in11[ 3 ]
initial
begin
	in11[3] = 1'b1;
end 
// in11[ 2 ]
initial
begin
	in11[2] = 1'b0;
end 
// in11[ 1 ]
initial
begin
	in11[1] = 1'b0;
end 
// in11[ 0 ]
initial
begin
	in11[0] = 1'b0;
end 
endmodule

