// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2019 05:18:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          skeleton
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module skeleton_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg movedown;
reg moveleft;
reg moveright;
reg moveup;
// wires                                               
wire [7:0] VGA_B;
wire VGA_BLANK;
wire VGA_CLK;
wire [7:0] VGA_G;
wire VGA_HS;
wire [7:0] VGA_R;
wire VGA_SYNC;
wire VGA_VS;
wire [31:0] ball;
wire [10:0] ball_x_pos;
wire [10:0] ball_y_pos;
wire clock;
wire [7:0] leds;

// assign statements (if any)                          
skeleton i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.VGA_B(VGA_B),
	.VGA_BLANK(VGA_BLANK),
	.VGA_CLK(VGA_CLK),
	.VGA_G(VGA_G),
	.VGA_HS(VGA_HS),
	.VGA_R(VGA_R),
	.VGA_SYNC(VGA_SYNC),
	.VGA_VS(VGA_VS),
	.ball(ball),
	.ball_x_pos(ball_x_pos),
	.ball_y_pos(ball_y_pos),
	.clock(clock),
	.leds(leds),
	.movedown(movedown),
	.moveleft(moveleft),
	.moveright(moveright),
	.moveup(moveup)
);
initial 
begin 
#100000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #20000 1'b1;
	#20000;
end 

// movedown
initial
begin
	movedown = 1'b0;
end 

// moveleft
initial
begin
	moveleft = 1'b0;
end 

// moveright
initial
begin
	moveright = 1'b0;
end 

// moveup
initial
begin
	moveup = 1'b0;
end 
endmodule

