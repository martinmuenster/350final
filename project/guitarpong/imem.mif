DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 01000000010000000000000000010100; -- 	lw $1 20($0)		# b_xpos [31:21]

0001 : 00111000010000000000000001111000; -- 	sw $1 120($0)

0002 : 01000000010000000000000000010101; -- 	lw $1 21($0)		# b_ypos [20:10]

0003 : 00111000010000000000000001111001; -- 	sw $1 121($0)

0004 : 01000000010000000000000000010110; -- 	lw $1 22($0) 		# b_xvel [9:5]

0005 : 00111000010000000000000001111010; -- 	sw $1 122($0)

0006 : 01000000010000000000000000010111; -- 	lw $1 23($0)		# b_yvel [4:0]

0007 : 00111000010000000000000001111011; -- 	sw $1 123($0)

0008 : 01000000010000000000000000011000; -- 	lw $1 24($0)		# pL_xpos [31:21]

0009 : 00111000010000000000000001111100; -- 	sw $1 124($0)

0010 : 01000000010000000000000000011001; -- 	lw $1 25($0)		# pL_ypos [20:10]

0011 : 00111000010000000000000001111101; -- 	sw $1 125($0)

0012 : 01000000010000000000000000011010; -- 	lw $1 26($0) 		# pR_xvel [9:5]

0013 : 00111000010000000000000001111110; -- 	sw $1 126($0)

0014 : 01000000010000000000000000011011; -- 	lw $1 27($0)		# pR_yvel [4:0]

0015 : 00111000010000000000000001111111; -- 	sw $1 127($0)

0016 : 01000000010000000000000000011100; -- 	lw $1 28($0)		# pL_xpos [31:21]

0017 : 00111000010000000000000010000000; -- 	sw $1 128($0)

0018 : 01000000010000000000000000011101; -- 	lw $1 29($0)		# pL_ypos [20:10]

0019 : 00111000010000000000000010000001; -- 	sw $1 129($0)

0020 : 01000000010000000000000000011110; -- 	lw $1 30($0) 		# pR_xvel [9:5]

0021 : 00111000010000000000000010000010; -- 	sw $1 130($0)

0022 : 01000000010000000000000000011111; -- 	lw $1 31($0)		# pR_yvel [4:0]

0023 : 00111000010000000000000010000011; -- 	sw $1 131($0)

0024 : 01000000010000000000000000110010; -- 	lw $1 50($0) 		# gametime

0025 : 00111000010000000000000010010110; -- 	sw $1 150($0)

0026 : 01000000010000000000000000110011; -- 	lw $1 51($0) 		# note pointer

0027 : 00111000010000000000000010010111; -- 	sw $1 151($0)

0028 : 01000000010000000000000000110100; -- 	lw $1 52($0) 		# note speed

0029 : 00111000010000000000000010011000; -- 	sw $1 152($0)

0030 : 00000000010000000000000000000000; -- 	add $1 $0 $0

0031 : 01000000100000000000000000001000; -- 	lw $2 8($0)						

0032 : 00101000010000100000000000000001; -- 		addi $1 $1 1

0033 : 00010000010001011111111111111110; -- 		bne $1 $2 counterincrement

0034 : 00001000000000000000000001111110; -- j update_vga_registers

0035 : 01000000010000000000000010010110; -- 	lw $1 150($0)

0036 : 00101000010000100000000000000001; -- 	addi $1 $1 1

0037 : 00111000010000000000000010010110; -- 	sw $1 150($0)

0038 : 00101011110000000000000010100000; -- 	    addi $15 $0 160      # move note data to temp func reg

0039 : 00011000000000000000000011101111; -- 	    jal check_note # update note 1

0040 : 00101011110000000000000010100100; -- 	    addi $15 $0 164 

0041 : 00011000000000000000000011101111; -- 	    jal check_note  # update note 2

0042 : 00101011110000000000000010101010; -- 	    addi $15 $0 170     # move note data to temp func reg

0043 : 00011000000000000000000011101111; -- 	    jal check_note # update note 3

0044 : 00101011110000000000000010101110; -- 	    addi $15 $0 174 

0045 : 00011000000000000000000011101111; -- 	    jal check_note  # update note 4

0046 : 00101011110000000000000010110100; -- 	    addi $15 $0 180     # move note data to temp func reg

0047 : 00011000000000000000000011101111; -- 	    jal check_note # update note 5

0048 : 00101011110000000000000010111000; -- 	    addi $15 $0 184 

0049 : 00011000000000000000000011101111; -- 	    jal check_note  # update note 6

0050 : 01000000010000000000000000001011; -- 				lw $1 11($0) 				# left_wall

0051 : 01000000100000000000000001111000; -- 				lw $2 120($0)				# ballxpos																

0052 : 00110000010001000000000001000001; -- 				blt $1 $2 hit_left_wall 	# ballxpos < left_wall

0053 : 01000000010000000000000000001100; -- 				lw $1 12($0)				# right_wall

0054 : 01000000100000000000000000000100; -- 				lw $2 4($0) 				# ball_length

0055 : 01000000110000000000000001111000; -- 				lw $3 120($0) 				# ballxpos

0056 : 00000000110001000011000000000000; -- 				add $3 $2 $3 				# ballxpos + ball_length = ball_right_boundry

0057 : 00110000110000100000000000111100; -- 				blt $3 $1 hit_right_wall	# ball_right_boundry < right_wall { hit right wall }

0058 : 01000000010000000000000001111001; -- 				lw $1 121($0) 				# t_ball

0059 : 01000000100000000000000001111101; -- 				lw $2 125($0)				# t_paddleL

0060 : 01000000110000000000000000000110; -- 				lw $3 6($0)					# paddle_length

0061 : 00000000110001000011000000000000; -- 				add $3 $2 $3 				# t_paddleL + paddle_length = b_paddleL

0062 : 00110000010001100000000000010000; -- 				blt $1 $3 end_lp_coll_check # if (top_ball > b_paddleL) { no left paddle collision }

0063 : 01000000010000000000000001111001; -- 				lw $1 121($0) 				# t_ball

0064 : 01000000100000000000000000000100; -- 				lw $2 4($0) 	 			# b_length

0065 : 00000000010000100010000000000000; -- 				add $1 $1 $2 				# b_ball = t_ball + b_length

0066 : 01000000100000000000000001111101; -- 				lw $2 125($0) 				# t_paddleL

0067 : 00110000100000100000000000001011; -- 				blt $2 $1 end_lp_coll_check # if (t_paddleL > b_ball) { no left paddle collision }

0068 : 01000000010000000000000001111100; -- 				lw $1 124($0) 				# l_paddleL

0069 : 01000000100000000000000000000101; -- 				lw $2 5($0) 	 			# paddle_width

0070 : 00000000010000100010000000000000; -- 				add $1 $1 $2 				# r_paddleL = l_paddleL + paddle_width

0071 : 01000000100000000000000001111000; -- 				lw $2 120($0) 				# l_ball

0072 : 00110000100000100000000000000110; -- 				blt $2 $1 end_lp_coll_check # l_ball > r_paddleL

0073 : 01000000010000000000000001111100; -- 				lw $1 124($0) 				# l_paddleL

0074 : 01000000100000000000000001111000; -- 				lw $2 120($0) 				# l_ball

0075 : 01000000110000000000000000000100; -- 				lw $3 4($0)					# ball_length

0076 : 00000000100001000011000000000000; -- 				add $2 $2 $3				# r_ball

0077 : 00110000010001000000000000000001; -- 				blt $1 $2 end_lp_coll_check # l_paddleL > r_ball

0078 : 00001000000000000000000001110110; -- 				j negate_x_vel

0079 : 01000000010000000000000001111001; -- 				lw $1 121($0) 				# t_ball

0080 : 01000000100000000000000010000001; -- 				lw $2 129($0)				# t_paddleR

0081 : 01000000110000000000000000000110; -- 				lw $3 6($0)					# paddle_length

0082 : 00000000110001000011000000000000; -- 				add $3 $2 $3 				# t_paddleR + paddle_length = b_paddleR

0083 : 00110000010001100000000000010000; -- 				blt $1 $3 end_rp_coll_check 		# if (top_ball > b_paddleR) { no left paddle collision }

0084 : 01000000010000000000000001111001; -- 				lw $1 121($0) 				# t_ball

0085 : 01000000100000000000000000000100; -- 				lw $2 4($0) 	 			# b_length

0086 : 00000000010000100010000000000000; -- 				add $1 $1 $2 				# b_ball = t_ball + b_length

0087 : 01000000100000000000000010000001; -- 				lw $2 129($0) 				# t_paddleR

0088 : 00110000100000100000000000001011; -- 				blt $2 $1 end_rp_coll_check # if (t_paddleR > b_ball) { no left paddle collision }

0089 : 01000000010000000000000001111000; -- 				lw $1 120($0) 				# l_ball

0090 : 01000000100000000000000000000100; -- 				lw $2 4($0) 	 			# ball_length

0091 : 00000000010000100010000000000000; -- 				add $1 $1 $2 				# r_ball = l_BALL + ball_length

0092 : 01000000100000000000000010000000; -- 				lw $2 128($0) 				# l_paddleR

0093 : 00110000100000100000000000000110; -- 				blt $2 $1 end_rp_coll_check # l_paddleR > r_BALL

0094 : 01000000010000000000000001111000; -- 				lw $1 120($0) 				# l_ball

0095 : 01000000100000000000000010000000; -- 				lw $2 128($0)				# l_paddleR

0096 : 01000000110000000000000000000101; -- 				lw $3 5($0)					# paddle_width

0097 : 00000000100001000011000000000000; -- 				add $2 $2 $3  				# r_paddleR

0098 : 00110000010001000000000000000001; -- 				blt $1 $2 end_rp_coll_check # l_ball > r_paddleR

0099 : 00001000000000000000000001110110; -- 				j negate_x_vel

0100 : 00001000000000000000000001100101; -- 				j update_bx

0101 : 01000000010000000000000001111000; -- 			lw $1 120($0) 	# $1: Ball x position.

0102 : 01000000110000000000000001111010; -- 			lw $3 122($0)	# $3: Ball x velocity

0103 : 00000001000000100011000000000000; -- 			add $4 $1 $3	# $6: newx = oldx + deltax

0104 : 00111001000000000000000001111000; -- 			sw $4 120($0)	# store newx

0105 : 01000000010000000000000000001001; -- 				lw $1 9($0)					# top_wall_pos

0106 : 01000000100000000000000001111001; -- 				lw $2 121($0) 				# ball_y_pos

0107 : 00110000010001000000000000001110; -- 				blt $1 $2 hit_top_wall		# top_wall_pos > ball_y_pos

0108 : 01000000010000000000000000001010; -- 				lw $1 10($0)				# bottom_wall_pos

0109 : 01000000100000000000000001111001; -- 				lw $2 121($0) 				# ball_y_pos

0110 : 01000000110000000000000000000100; -- 				lw $3 4($0)		 			# ball_length

0111 : 00000000110001100010000000000000; -- 				add $3 $3 $2 				# ball_ypos + ball_length = ball_bottom_boundry

0112 : 00110000110000100000000000001001; -- 				blt $3 $1 hit_bottom_wall 	# if (ball_bottom_boundry > bottom_wall_pos) { hit_bottom_wall }

0113 : 01000000010000000000000001111001; -- 			lw $1 121($0) 					# ball_oldypos

0114 : 01000000100000000000000001111011; -- 			lw $2 123($0)					# ballyvel

0115 : 00000000100001000001000000000000; -- 			add $2 $2 $1					# newy = ball_oldypos + ballyvel

0116 : 00111000100000000000000001111001; -- 			sw $2 121($0) 					# store newy into 121.

0117 : 00001000000000000000000000011110; -- j bufferloop

0118 : 01000000110000000000000001111010; -- 	lw $3 122($0)	# $3: Ball x velocity

0119 : 00000001000000000011000000000100; -- 	sub $4 $0 $3 	# Negate x velocity

0120 : 00111001000000000000000001111010; -- 	sw $4 122($0)	# Store new x velocity into function. 

0121 : 00001000000000000000000001100101; -- 	j update_bx

0122 : 01000000010000000000000001111011; -- 	lw $1 123($0)	# Ball y velocity

0123 : 00000000010000000001000000000100; -- 	sub $1 $0 $1	# Negate y velocity

0124 : 00111000010000000000000001111011; -- 	sw $1 123($0) 	# Insert new ball velocity into dmem

0125 : 00001000000000000000000001110001; -- 	j update_by

0126 : 00011000000000000000000010000101; -- 	jal push_to_reg10

0127 : 00011000000000000000000010001011; -- 	jal push_to_reg11

0128 : 00011000000000000000000010010001; -- 	jal push_to_reg12

0129 : 00011000000000000000000010101110; -- 	jal push_to_reg20

0130 : 00011000000000000000000010110100; -- 	jal push_to_reg21

0131 : 00011000000000000000000010111010; -- 	jal push_to_reg22

0132 : 00001000000000000000000000100011; -- 	j registers_updated

0133 : 00101100000000000000000001111000; -- 		addi $16 $0 120 		# start storing into dmem at address 120. (120, 121, 122, 123)

0134 : 00000111101111100000000000000000; -- 		add $30 $31 $0

0135 : 00011000000000000000000010010111; -- 		jal push_31_20_9_4

0136 : 00000111111111000000000000000000; -- 		add $31 $30 $0

0137 : 00101010100111100000000000000000; -- 		addi $10 $15 0			# $15 output of jal. Has consolidated register info.

0138 : 00100111110000000000000000000000; -- 		jr $31

0139 : 00101100000000000000000001111100; -- 		addi $16 $0 124 		# start storing into dmem at address 120. (120, 121, 122, 123)

0140 : 00000111101111100000000000000000; -- 		add $30 $31 $0

0141 : 00011000000000000000000010010111; -- 		jal push_31_20_9_4

0142 : 00000111111111000000000000000000; -- 		add $31 $30 $0

0143 : 00101010110111100000000000000000; -- 		addi $11 $15 0			# $15 output of jal. Has consolidated register info.

0144 : 00100111110000000000000000000000; -- 		jr $31

0145 : 00101100000000000000000010000000; -- 		addi $16 $0 128 		# start storing into dmem at address 120. (120, 121, 122, 123)

0146 : 00000111101111100000000000000000; -- 		add $30 $31 $0

0147 : 00011000000000000000000010010111; -- 		jal push_31_20_9_4

0148 : 00000111111111000000000000000000; -- 		add $31 $30 $0

0149 : 00101011000111100000000000000000; -- 		addi $12 $15 0			# $15 output of jal. Has consolidated register info.

0150 : 00100111110000000000000000000000; -- 		jr $31

0151 : 00000011110000000000000000000000; -- 		add $15 $0 $0

0152 : 01000100011000000000000000000000; -- 		lw $17 0($16)			# [31:21]

0153 : 00000100011000100000101010010000; -- 		sll $17 $17 21

0154 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0155 : 01000100011000000000000000000001; -- 		lw $17 1($16)			# [20:10]

0156 : 00101100100000000000011111111111; -- 		addi $18 $0 2047

0157 : 00000100101001000000010100010000; -- 		sll $18 $18 10

0158 : 00000100011000100000010100010000; -- 		sll $17 $17 10

0159 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0160 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0161 : 01000100011000000000000000000010; -- 		lw $17 2($16) 			# [9:5]

0162 : 00101100100000000000000000011111; -- 		addi $18 $0 31

0163 : 00000100101001000000001010010000; -- 		sll $18 $18 5

0164 : 00000100011000100000001010010000; -- 		sll $17 $17 5

0165 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0166 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0167 : 01000100011000000000000000000011; -- 		lw $17 3($16)			# [4:0]

0168 : 00101100100000000000000000011111; -- 		addi $18 $0 31

0169 : 00000100101001000000000000010000; -- 		sll $18 $18 0

0170 : 00000100011000100000000000010000; -- 		sll $17 $17 0

0171 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0172 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0173 : 00100111110000000000000000000000; -- 		jr $31

0174 : 00101100000000000000000010100000; -- 		addi $16 $0 160	 		# start storing into dmem at address 160. (160, 161, 162, 163, 164, 165, 166, 167)

0175 : 00000111101111100000000000000000; -- 		add $30 $31 $0

0176 : 00011000000000000000000011000000; -- 		jal push_31_20_17_16_15_4_1_0

0177 : 00000111111111000000000000000000; -- 		add $31 $30 $0

0178 : 00101101000111100000000000000000; -- 		addi $20 $15 0			# $15 output of jal. Has consolidated register info.

0179 : 00100111110000000000000000000000; -- 		jr $31

0180 : 00101100000000000000000010101010; -- 		addi $16 $0 170	 		# start storing into dmem at address 170. (170, 171, 172, 173, 174, 175, 176, 177)

0181 : 00000111101111100000000000000000; -- 		add $30 $31 $0

0182 : 00011000000000000000000011000000; -- 		jal push_31_20_17_16_15_4_1_0

0183 : 00000111111111000000000000000000; -- 		add $31 $30 $0

0184 : 00101101010111100000000000000000; -- 		addi $21 $15 0			# $15 output of jal. Has consolidated register info.

0185 : 00100111110000000000000000000000; -- 		jr $31

0186 : 00101100000000000000000010110100; -- 		addi $16 $0 180	 		# start storing into dmem at address 170. (180, 181, 182, 183, 184, 185, 186, 187)

0187 : 00000111101111100000000000000000; -- 		add $30 $31 $0

0188 : 00011000000000000000000011000000; -- 		jal push_31_20_17_16_15_4_1_0

0189 : 00000111111111000000000000000000; -- 		add $31 $30 $0

0190 : 00101101100111100000000000000000; -- 		addi $22 $15 0			# $15 output of jal. Has consolidated register info.

0191 : 00100111110000000000000000000000; -- 		jr $31

0192 : 00000011110000000000000000000000; -- 		add $15 $0 $0

0193 : 01000100011000000000000000000000; -- 		lw $17 0($16)		

0194 : 00000100011000100000101010010000; -- 		sll $17 $17 21

0195 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0196 : 01000100011000000000000000000001; -- 		lw $17 1($16)			

0197 : 00101100100000000000000000000011; -- 		addi $18 $0 3

0198 : 00000100101001000000100100010000; -- 		sll $18 $18 18

0199 : 00000100011000100000100100010000; -- 		sll $17 $17 18

0200 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0201 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0202 : 01000100011000000000000000000010; -- 		lw $17 2($16) 			

0203 : 00101100100000000000000000000001; -- 		addi $18 $0 1

0204 : 00000100101001000000100010010000; -- 		sll $18 $18 17

0205 : 00000100011000100000100010010000; -- 		sll $17 $17 17

0206 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0207 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0208 : 01000100011000000000000000000011; -- 		lw $17 3($16) 			

0209 : 00101100100000000000000000000001; -- 		addi $18 $0 1

0210 : 00000100101001000000100000010000; -- 		sll $18 $18 16

0211 : 00000100011000100000100000010000; -- 		sll $17 $17 16

0212 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0213 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0214 : 01000100011000000000000000000100; -- 		lw $17 4($16) 			

0215 : 00101100100000000000011111111111; -- 		addi $18 $0 2047

0216 : 00000100101001000000001010010000; -- 		sll $18 $18 5

0217 : 00000100011000100000001010010000; -- 		sll $17 $17 5

0218 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0219 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0220 : 01000100011000000000000000000101; -- 		lw $17 5($16) 			

0221 : 00101100100000000000000000000011; -- 		addi $18 $0 3

0222 : 00000100101001000000000100010000; -- 		sll $18 $18 2

0223 : 00000100011000100000000100010000; -- 		sll $17 $17 2

0224 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0225 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0226 : 01000100011000000000000000000101; -- 		lw $17 5($16) 			

0227 : 00101100100000000000000000000001; -- 		addi $18 $0 1

0228 : 00000100101001000000000010010000; -- 		sll $18 $18 1

0229 : 00000100011000100000000010010000; -- 		sll $17 $17 1

0230 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0231 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0232 : 01000100011000000000000000000101; -- 		lw $17 5($16) 			

0233 : 00101100100000000000000000000001; -- 		addi $18 $0 1

0234 : 00000100101001000000000000010000; -- 		sll $18 $18 0

0235 : 00000100011000100000000000010000; -- 		sll $17 $17 0

0236 : 00000100011000110010000000001000; -- 		and $17 $17 $18

0237 : 00000011110111110001000000000000; -- 		add $15 $15 $17

0238 : 00100111110000000000000000000000; -- 		jr $31

0239 : 01000100000111100000000000000001; --     lw $16 1($15)

0240 : 00010100000000000000000000000001; --     bne $16 $0 note_notempty    # jump if note exists

0241 : 00001000000000000000000011111000; --     j note_empty                # else jump to make a note

0242 : 01000100000000000000000010011000; --     lw $16 152($0)   # load note velocity into $16

0243 : 01000100010111100000000000000000; --     lw $17 0($15)

0244 : 00000100011000110000000000000000; --     add $17 $17 $16 # add velocity to high bit note pos

0245 : 00111100010111100000000000000000; --     sw $17 0($15)

0246 : 00001000000000000000000100000011; --  	j is_note_out_of_bounds # Preserve $15! send note dmem location in $15 

0247 : 00100111110000000000000000000000; --     jr $31          # note's position has been updated, return to game loop

0248 : 01000100000000000000000010010111; --     lw $16 151($0)       # load note pointer into $16

0249 : 01000100011000000000000000000001; --     lw $17 1($16)       # load the time of the next note into $17

0250 : 01000100100000000000000010010110; --     lw $18 150($0)       # load the game loop counter into $18

0251 : 00110100101000100000000000000001; --     blt $18 $17 make_note # if counter is greater than next note time, make note

0252 : 00100111110000000000000000000000; --     jr $31              # else, keep note empty, return to game loop

0253 : 01000100000000000000000010010111; --     lw $16 151($0)       # load note pointer into $16

0254 : 01000100011000000000000000000000; --     lw $17 0($16)       # load the value of the next note into $17

0255 : 00111100010111100000000000000001; --     sw $17 1($15)

0256 : 00101100001000000000000000000010; --     addi $16 $16 2       # increment note pointer to next note

0257 : 00111100000000000000000010010111; --     sw $16 151($0)       # store new note pointer into DMEM

0258 : 00100111110000000000000000000000; --     jr $31

0259 : 01000100000111100000000000000000; -- 	lw $16 0($15) 	# note_x_pos

0260 : 01000100010000000000000000001100; -- 	lw $17 12($0) 	# screen_width

0261 : 00000100011000100000000010010100; -- 	sra $17 $17 1 	# screen_width/2

0262 : 00110100001000100000000000000001; -- 	blt $16 $17 erase_note

0263 : 00001000000000000000000011110111; -- 		j end_is_note_out_of_bounds

0264 : 00111000000111100000000000000000; -- 		sw $0 0($15)

0265 : 00111000000111100000000000000001; -- 		sw $0 1($15)

0266 : 00111000000111100000000000000010; -- 		sw $0 2($15)

0267 : 00111000000111100000000000000011; -- 		sw $0 3($15)

0268 : 00001000000000000000000011110111; -- 		j end_is_note_out_of_bounds

[0269..4095] : 00000000000000000000000000000000;
END;
