DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 00111000000000000000000010010101; -- 	sw $0 149($0)

0001 : 00011000000000000000000100000110; -- 	jal push_to_reg13

0002 : 00011000000000000000000101100100; -- 	jal push_to_reg14

0003 : 00001000000000000000001010100110; -- 		j increment_pseudorandom_counter1

0004 : 00011000000000000000000101110100; -- 		jal store_inputs_into_dmem

0005 : 01000000100000000000000010001100; -- 		lw $2 140($0) # p1 guitar inputs

0006 : 00101000110000000000000000000001; -- 		addi $3 $0 1 

0007 : 00010000100001100000000000000001; -- 		bne $2 $3 not_single_player

0008 : 00001000000000000000000000001110; -- 			j start_single_player_screen	# If red pressed 

0009 : 01000000100000000000000010001100; -- 		lw $2 140($0) # p1 guitar inputs

0010 : 00101000110000000000000000000010; -- 		addi $3 $0 2

0011 : 00010000100001100000000000000001; -- 		bne $2 $3 not_multi_player # If green or yellow pressed

0012 : 00001000000000000000000000010011; -- 			j start_multi_player_screen 

0013 : 00001000000000000000000000000000; -- j start_splash_screen # If guitar didn't press anything, stay in splash screen.

0014 : 00101000010000000000000000000001; -- 	addi $1 $0 1

0015 : 00111000010000000000000010010101; -- 	sw $1 149($0) # store game state 1 into dmem

0016 : 00011000000000000000000100000110; -- 	jal push_to_reg13

0017 : 00011000000000000000000101100100; -- 	jal push_to_reg14

0018 : 00001000000000000000000000100011; -- j start_game

0019 : 00101000010000000000000000000010; -- 	addi $1 $0 2

0020 : 00111000010000000000000010010101; -- 	sw $1 149($0) # store game state 1 into dmem

0021 : 00011000000000000000000100000110; -- 	jal push_to_reg13

0022 : 00011000000000000000000101100100; -- 	jal push_to_reg14

0023 : 00001000000000000000000000100011; -- j start_game

0024 : 00101000010000000000000000000011; -- 	addi $1 $0 3

0025 : 00111000010000000000000010010101; -- 	sw $1 149($0) # store game state 1 into dmem

0026 : 00011000000000000000000100000110; -- 	jal push_to_reg13

0027 : 00011000000000000000000101100100; -- 	jal push_to_reg14

0028 : 00001000000000000000001010101100; -- 	j increment_pseudorandom_counter2

0029 : 00011000000000000000000101110100; -- 	jal store_inputs_into_dmem

0030 : 01000000100000000000000010001100; -- 	lw $2 140($0)

0031 : 00101000010000000000000000000100; -- 	addi $1 $0 4

0032 : 00010000100000111111111111110111; -- 	bne $2 $1 start_game_over_screen

0033 : 00001000000000000000000000000000; -- 	j start_splash_screen	# if a button is pressed, then exit to splash screen

0034 : 00001000000000000000000000011000; -- j start_game_over_screen

0035 : 01000000010000000000000000010100; -- 	lw $1 20($0)		# b_xpos [31:21]

0036 : 00111000010000000000000001111000; -- 	sw $1 120($0)

0037 : 01000000010000000000000000010101; -- 	lw $1 21($0)		# b_ypos [20:10]

0038 : 00111000010000000000000001111001; -- 	sw $1 121($0)

0039 : 01000000010000000000000000010110; -- 	lw $1 22($0) 		# b_xvel [9:5]

0040 : 00111000010000000000000001111010; -- 	sw $1 122($0)

0041 : 01000000010000000000000000010111; -- 	lw $1 23($0)		# b_yvel [4:0]

0042 : 00111000010000000000000001111011; -- 	sw $1 123($0)

0043 : 01000000010000000000000000011000; -- 	lw $1 24($0)		# pL_xpos [31:21]

0044 : 00111000010000000000000001111100; -- 	sw $1 124($0)

0045 : 01000000010000000000000000011001; -- 	lw $1 25($0)		# pL_ypos [20:10]

0046 : 00111000010000000000000001111101; -- 	sw $1 125($0)

0047 : 01000000010000000000000000011010; -- 	lw $1 26($0) 		# pR_xvel [9:5]

0048 : 00111000010000000000000001111110; -- 	sw $1 126($0)

0049 : 01000000010000000000000000011011; -- 	lw $1 27($0)		# pR_yvel [4:0]

0050 : 00111000010000000000000001111111; -- 	sw $1 127($0)

0051 : 01000000010000000000000000011100; -- 	lw $1 28($0)		# pL_xpos [31:21]

0052 : 00111000010000000000000010000000; -- 	sw $1 128($0)

0053 : 01000000010000000000000000011101; -- 	lw $1 29($0)		# pL_ypos [20:10]

0054 : 00111000010000000000000010000001; -- 	sw $1 129($0)

0055 : 01000000010000000000000000011110; -- 	lw $1 30($0) 		# pR_xvel [9:5]

0056 : 00111000010000000000000010000010; -- 	sw $1 130($0)

0057 : 01000000010000000000000000011111; -- 	lw $1 31($0)		# pR_yvel [4:0]

0058 : 00111000010000000000000010000011; -- 	sw $1 131($0)

0059 : 00111000000000000000000010000100; -- 	sw $0 132($0)

0060 : 00111000000000000000000010000101; -- 	sw $0 133($0)

0061 : 01000000010000000000000000101010; -- 	lw $1 42($0) 		# p1_powerup_score

0062 : 00111000010000000000000010001110; -- 	sw $1 142($0) 		

0063 : 01000000010000000000000000101011; -- 	lw $1 43($0) 		# p2_powerup_score

0064 : 00111000010000000000000010001111; -- 	sw $1 143($0) 		

0065 : 01000000010000000000000000101100; -- 	lw $1 44($0) 		# pl_lives

0066 : 00111000010000000000000010010000; -- 	sw $1 144($0)

0067 : 01000000010000000000000000101101; -- 	lw $1 45($0) 		# p2_lives

0068 : 00111000010000000000000010010001; -- 	sw $1 145($0) 

0069 : 01000000010000000000000000101110; -- 	lw $1 46($0) 		# gravity_time_left

0070 : 00111000010000000000000010010010; -- 	sw $1 146($0)

0071 : 01000000010000000000000000101111; -- 	lw $1 47($0) 		# gravity_affecting_who

0072 : 00111000010000000000000010010011; -- 	sw $1 147($0)

0073 : 01000000010000000000000000110010; -- 	lw $1 50($0) 		# gametime

0074 : 00111000010000000000000010010110; -- 	sw $1 150($0)

0075 : 01000000010000000000000000110011; -- 	lw $1 51($0) 		# note pointer

0076 : 00111000010000000000000010010111; -- 	sw $1 151($0)

0077 : 01000000010000000000000000110100; -- 	lw $1 52($0) 		# note speed

0078 : 00111000010000000000000010011000; -- 	sw $1 152($0)

0079 : 00111000000000000000000010100000; -- 		sw $0 160($0)	

0080 : 00111000000000000000000010100001; -- 		sw $0 161($0)

0081 : 00111000000000000000000010100010; -- 		sw $0 162($0)

0082 : 00111000000000000000000010100011; -- 		sw $0 163($0)

0083 : 00111000000000000000000010100100; -- 		sw $0 164($0)

0084 : 00111000000000000000000010100101; -- 		sw $0 165($0)

0085 : 00111000000000000000000010100110; -- 		sw $0 166($0)

0086 : 00111000000000000000000010100111; -- 		sw $0 167($0)

0087 : 00111000000000000000000010101010; -- 		sw $0 170($0)	

0088 : 00111000000000000000000010101011; -- 		sw $0 171($0)

0089 : 00111000000000000000000010101100; -- 		sw $0 172($0)

0090 : 00111000000000000000000010101101; -- 		sw $0 173($0)

0091 : 00111000000000000000000010101110; -- 		sw $0 174($0)

0092 : 00111000000000000000000010101111; -- 		sw $0 175($0)

0093 : 00111000000000000000000010110000; -- 		sw $0 176($0)

0094 : 00111000000000000000000010110001; -- 		sw $0 177($0)

0095 : 00111000000000000000000010110100; -- 		sw $0 180($0)	

0096 : 00111000000000000000000010110101; -- 		sw $0 181($0)

0097 : 00111000000000000000000010110110; -- 		sw $0 182($0)

0098 : 00111000000000000000000010110111; -- 		sw $0 183($0)

0099 : 00111000000000000000000010111000; -- 		sw $0 184($0)

0100 : 00111000000000000000000010111001; -- 		sw $0 185($0)

0101 : 00111000000000000000000010111010; -- 		sw $0 186($0)

0102 : 00111000000000000000000010111011; -- 		sw $0 187($0)

0103 : 00000001110000000000000000000000; -- 		add $7 $0 $0

0104 : 01000000100000000000000000001000; -- 		lw $2 8($0)						

0105 : 00001000000000000000001010110010; -- 			j increment_pseudorandom_counter3

0106 : 00101001110011100000000000000001; -- 			addi $7 $7 1

0107 : 00010001110001011111111111111101; -- 			bne $7 $2 counterincrement

0108 : 00001000000000000000000011101011; -- 	j update_vga_registers

0109 : 00011000000000000000000101110100; -- 	jal store_inputs_into_dmem

0110 : 01000000010000000000000010010110; -- 		lw $1 150($0)

0111 : 00101000010000100000000000000001; -- 		addi $1 $1 1

0112 : 00111000010000000000000010010110; -- 		sw $1 150($0)

0113 : 00101011110000000000000010100000; -- 		    addi $15 $0 160      # move note data to temp func reg

0114 : 00011000000000000000000101111101; -- 		    jal check_note # update note 1

0115 : 00101011110000000000000010100100; -- 		    addi $15 $0 164 

0116 : 00011000000000000000000101111101; -- 		    jal check_note  # update note 2

0117 : 00101011110000000000000010101010; -- 		    addi $15 $0 170     # move note data to temp func reg

0118 : 00011000000000000000000101111101; -- 		    jal check_note # update note 3

0119 : 00101011110000000000000010101110; -- 		    addi $15 $0 174 

0120 : 00011000000000000000000101111101; -- 		    jal check_note  # update note 4

0121 : 00101011110000000000000010110100; -- 		    addi $15 $0 180     # move note data to temp func reg

0122 : 00011000000000000000000101111101; -- 		    jal check_note # update note 5

0123 : 00101011110000000000000010111000; -- 		    addi $15 $0 184 

0124 : 00011000000000000000000101111101; -- 		    jal check_note  # update note 6

0125 : 01000000010000000000000000001011; -- 					lw $1 11($0) 				# left_wall

0126 : 01000000100000000000000001111000; -- 					lw $2 120($0)				# ballxpos																

0127 : 00110000010001000000000101110011; -- 					blt $1 $2 hit_left_wall 	# ballxpos < left_wall

0128 : 01000000010000000000000000001100; -- 					lw $1 12($0)				# right_wall

0129 : 01000000100000000000000000000100; -- 					lw $2 4($0) 				# ball_length

0130 : 01000000110000000000000001111000; -- 					lw $3 120($0) 				# ballxpos

0131 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# ballxpos + ball_length = ball_right_boundry

0132 : 00110000110000100000000101110011; -- 					blt $3 $1 hit_right_wall	# ball_right_boundry < right_wall { hit right wall }

0133 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0134 : 01000000100000000000000001111101; -- 					lw $2 125($0)				# t_paddleL

0135 : 01000000110000000000000000000110; -- 					lw $3 6($0)					# paddle_length

0136 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# t_paddleL + paddle_length = b_paddleL

0137 : 00110000010001100000000000010000; -- 					blt $1 $3 end_lp_coll_check # if (top_ball > b_paddleL) { no left paddle collision }

0138 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0139 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# b_length

0140 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# b_ball = t_ball + b_length

0141 : 01000000100000000000000001111101; -- 					lw $2 125($0) 				# t_paddleL

0142 : 00110000100000100000000000001011; -- 					blt $2 $1 end_lp_coll_check # if (t_paddleL > b_ball) { no left paddle collision }

0143 : 01000000010000000000000001111100; -- 					lw $1 124($0) 				# l_paddleL

0144 : 01000000100000000000000000000101; -- 					lw $2 5($0) 	 			# paddle_width

0145 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# r_paddleL = l_paddleL + paddle_width

0146 : 01000000100000000000000001111000; -- 					lw $2 120($0) 				# l_ball

0147 : 00110000100000100000000000000110; -- 					blt $2 $1 end_lp_coll_check # l_ball > r_paddleL

0148 : 01000000010000000000000001111100; -- 					lw $1 124($0) 				# l_paddleL

0149 : 01000000100000000000000001111000; -- 					lw $2 120($0) 				# l_ball

0150 : 01000000110000000000000000000100; -- 					lw $3 4($0)					# ball_length

0151 : 00000000100001000011000000000000; -- 					add $2 $2 $3				# r_ball

0152 : 00110000010001000000000000000001; -- 					blt $1 $2 end_lp_coll_check # l_paddleL > r_ball

0153 : 00001000000000000000001000001100; -- 					j hit_paddleL

0154 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0155 : 01000000100000000000000010000001; -- 					lw $2 129($0)				# t_paddleR

0156 : 01000000110000000000000000000110; -- 					lw $3 6($0)					# paddle_length

0157 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# t_paddleR + paddle_length = b_paddleR

0158 : 00110000010001100000000000010000; -- 					blt $1 $3 end_rp_coll_check # if (top_ball > b_paddleR) { no left paddle collision }

0159 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0160 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# b_length

0161 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# b_ball = t_ball + b_length

0162 : 01000000100000000000000010000001; -- 					lw $2 129($0) 				# t_paddleR

0163 : 00110000100000100000000000001011; -- 					blt $2 $1 end_rp_coll_check # if (t_paddleR > b_ball) { no left paddle collision }

0164 : 01000000010000000000000001111000; -- 					lw $1 120($0) 				# l_ball

0165 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# ball_length

0166 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# r_ball = l_BALL + ball_length

0167 : 01000000100000000000000010000000; -- 					lw $2 128($0) 				# l_paddleR

0168 : 00110000100000100000000000000110; -- 					blt $2 $1 end_rp_coll_check # l_paddleR > r_BALL

0169 : 01000000010000000000000001111000; -- 					lw $1 120($0) 				# l_ball

0170 : 01000000100000000000000010000000; -- 					lw $2 128($0)				# l_paddleR

0171 : 01000000110000000000000000000101; -- 					lw $3 5($0)					# paddle_width

0172 : 00000000100001000011000000000000; -- 					add $2 $2 $3  				# r_paddleR

0173 : 00110000010001000000000000000001; -- 					blt $1 $2 end_rp_coll_check # l_ball > r_paddleR

0174 : 00001000000000000000001000111010; -- 					j hit_paddleR

0175 : 00001000000000000000000010110000; -- 					j update_bx

0176 : 01000000010000000000000001111000; -- 				lw $1 120($0) 	# $1: Ball x position.

0177 : 01000000110000000000000001111010; -- 				lw $3 122($0)	# $3: Ball x velocity

0178 : 00000001000000100011000000000000; -- 				add $4 $1 $3	# $6: newx = oldx + deltax

0179 : 00111001000000000000000001111000; -- 				sw $4 120($0)	# store newx

0180 : 01000000010000000000000000001001; -- 					lw $1 9($0)					# top_wall_pos

0181 : 01000000100000000000000001111001; -- 					lw $2 121($0) 				# ball_y_pos

0182 : 00110000010001000000000110111010; -- 					blt $1 $2 hit_top_wall		# top_wall_pos > ball_y_pos

0183 : 01000000010000000000000000001010; -- 					lw $1 10($0)				# bottom_wall_pos

0184 : 01000000100000000000000001111001; -- 					lw $2 121($0) 				# ball_y_pos

0185 : 01000000110000000000000000000100; -- 					lw $3 4($0)		 			# ball_length

0186 : 00000000110001100010000000000000; -- 					add $3 $3 $2 				# ball_ypos + ball_length = ball_bottom_boundry

0187 : 00110000110000100000000110110000; -- 					blt $3 $1 hit_bottom_wall 	# if (ball_bottom_boundry > bottom_wall_pos) { hit_bottom_wall }

0188 : 01000000010000000000000001111001; -- 				lw $1 121($0) 					# ball_oldypos

0189 : 01000000100000000000000001111011; -- 				lw $2 123($0)					# ballyvel

0190 : 00000000100001000001000000000000; -- 				add $2 $2 $1					# newy = ball_oldypos + ballyvel

0191 : 00111000100000000000000001111001; -- 				sw $2 121($0) 					# store newy into 121.

0192 : 01000000010000000000000001111000; -- 			lw $1 120($0) 	# ballX 

0193 : 01000000100000000000000000000100; -- 			lw $2 4($0)	# ball_length

0194 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# ball_length/2

0195 : 00000000010000100010000000000000; -- 			add $1 $1 $2 	# center_x of ball

0196 : 01000000100000000000000000001100; -- 			lw $2 12($0)	# wall_width

0197 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# wall_width/2

0198 : 00110000010001000000000000001110; -- 			blt $1 $2 end_move_paddleL		# center_x_ball > wall_width/2

0199 : 01000001000000000000000010000100; -- 			lw $4 132($0) # pL stoptime_left

0200 : 00010001000000000000000000001000; -- 			bne $4 $0 decrement_paddleL_pausetime

0201 : 01000000010000000000000001111101; -- 			lw $1 125($0) # paddleL_ypos

0202 : 01000000100000000000000000000110; -- 			lw $2 6($0) # paddleL_length

0203 : 00000000100001000000000010010100; -- 			sra $2 $2 1	#  paddleL_length/2

0204 : 00000000100001000001000000000000; -- 			add $2 $2 $1 # paddleL_ymid = paddle_length/2 + paddle_ypos

0205 : 01000000110000000000000001111001; -- 			lw $3 121($0) # ball_ypos

0206 : 00110000110001000000000110100111; -- 			blt $3 $2 move_paddleL_down # if ball_ypos > paddleL_ymid

0207 : 00110000100001100000000110110100; -- 			blt $2 $3 move_paddleL_up # if paddleL_ymid > ball_ypos

0208 : 00001000000000000000000011010101; -- 			j end_move_paddleL

0209 : 01000001000000000000000010000100; -- 				lw $4 132($0) # pL stoptime_left

0210 : 00101001000010011111111111111111; -- 				addi $4 $4 -1 # decrement pL stoptime_left

0211 : 00111001000000000000000010000100; -- 				sw $4 132($0) # push back pL stoptime_left

0212 : 00001000000000000000000011010101; -- 			j end_move_paddleL

0213 : 01000000010000000000000001111000; -- 			lw $1 120($0) 	# ballX 

0214 : 01000000100000000000000000000100; -- 			lw $2 4($0)	# ball_length

0215 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# ball_length/2

0216 : 00000000010000100010000000000000; -- 			add $1 $1 $2 	# center_x of ball

0217 : 01000000100000000000000000001100; -- 			lw $2 12($0)	# wall_width

0218 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# wall_width/2

0219 : 00110000100000100000000000001110; -- 			blt $2 $1 end_move_paddleR		# wall_width/2 > center_x_ball

0220 : 01000001000000000000000010000101; -- 			lw $4 133($0) # pL stoptime_left

0221 : 00010001000000000000000000001000; -- 			bne $4 $0 decrement_paddleR_pausetime # if pR stoptime_left > 0, then jump

0222 : 01000000010000000000000010000001; -- 			lw $1 129($0) # paddleR_ypos

0223 : 01000000100000000000000000000110; -- 			lw $2 6($0) # paddleR_length

0224 : 00000000100001000000000010010100; -- 			sra $2 $2 1	#  paddleR_length/2

0225 : 00000000100001000001000000000000; -- 			add $2 $2 $1 # paddleR_ymid = paddle_length/2 + paddle_ypos

0226 : 01000000110000000000000001111001; -- 			lw $3 121($0) # ball_ypos

0227 : 00110000110001000000000110101010; -- 			blt $3 $2 move_paddleR_down # if ball_ypos > paddleR_ymid

0228 : 00110000100001100000000110110111; -- 			blt $2 $3 move_paddleR_up # if paddleR_ymid > ball_ypos

0229 : 00001000000000000000000011101010; -- 			j end_move_paddleR

0230 : 01000001000000000000000010000101; -- 				lw $4 133($0) # pR stoptime_left

0231 : 00101001000010011111111111111111; -- 				addi $4 $4 -1 # decrement pR stoptime_left

0232 : 00111001000000000000000010000101; -- 				sw $4 133($0) # push back pR stoptime_left

0233 : 00001000000000000000000011101010; -- 			j end_move_paddleR

0234 : 00001000000000000000000001100111; -- 	j bufferloop

0235 : 00011000000000000000000011110100; -- 		jal push_to_reg10

0236 : 00011000000000000000000011111010; -- 		jal push_to_reg11

0237 : 00011000000000000000000100000000; -- 		jal push_to_reg12

0238 : 00011000000000000000000100000110; -- 		jal push_to_reg13

0239 : 00011000000000000000000101100100; -- 		jal push_to_reg14

0240 : 00011000000000000000000100100011; -- 		jal push_to_reg20

0241 : 00011000000000000000000100101001; -- 		jal push_to_reg21

0242 : 00011000000000000000000100101111; -- 		jal push_to_reg22

0243 : 00001000000000000000000001101101; -- 		j updated_vga_registers

0244 : 00101100000000000000000001111000; -- 			addi $16 $0 120 		# start storing into dmem at address 120. (120, 121, 122, 123)

0245 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0246 : 00011000000000000000000100001100; -- 			jal push_31_20_9_4

0247 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0248 : 00101010100111100000000000000000; -- 			addi $10 $15 0			# $15 output of jal. Has consolidated register info.

0249 : 00100111110000000000000000000000; -- 			jr $31

0250 : 00101100000000000000000001111100; -- 			addi $16 $0 124 		# start storing into dmem at address 120. (120, 121, 122, 123)

0251 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0252 : 00011000000000000000000100001100; -- 			jal push_31_20_9_4

0253 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0254 : 00101010110111100000000000000000; -- 			addi $11 $15 0			# $15 output of jal. Has consolidated register info.

0255 : 00100111110000000000000000000000; -- 			jr $31

0256 : 00101100000000000000000010000000; -- 			addi $16 $0 128 		# start storing into dmem at address 120. (120, 121, 122, 123)

0257 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0258 : 00011000000000000000000100001100; -- 			jal push_31_20_9_4

0259 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0260 : 00101011000111100000000000000000; -- 			addi $12 $15 0			# $15 output of jal. Has consolidated register info.

0261 : 00100111110000000000000000000000; -- 			jr $31

0262 : 00101100000000000000000010001110; -- 			addi $16 $0 142 		# start storing into dmem at address 142.

0263 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0264 : 00011000000000000000000100001100; -- 			jal push_31_20_9_4

0265 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0266 : 00101011010111100000000000000000; -- 			addi $13 $15 0

0267 : 00100111110000000000000000000000; -- 			jr $31

0268 : 00000011110000000000000000000000; -- 			add $15 $0 $0

0269 : 01000100011000000000000000000000; -- 			lw $17 0($16)			# [31:21]

0270 : 00000100011000100000101010010000; -- 			sll $17 $17 21

0271 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0272 : 01000100011000000000000000000001; -- 			lw $17 1($16)			# [20:10]

0273 : 00101100100000000000011111111111; -- 			addi $18 $0 2047

0274 : 00000100101001000000010100010000; -- 			sll $18 $18 10

0275 : 00000100011000100000010100010000; -- 			sll $17 $17 10

0276 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0277 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0278 : 01000100011000000000000000000010; -- 			lw $17 2($16) 			# [9:5]

0279 : 00101100100000000000000000011111; -- 			addi $18 $0 31

0280 : 00000100101001000000001010010000; -- 			sll $18 $18 5

0281 : 00000100011000100000001010010000; -- 			sll $17 $17 5

0282 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0283 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0284 : 01000100011000000000000000000011; -- 			lw $17 3($16)			# [4:0]

0285 : 00101100100000000000000000011111; -- 			addi $18 $0 31

0286 : 00000100101001000000000000010000; -- 			sll $18 $18 0

0287 : 00000100011000100000000000010000; -- 			sll $17 $17 0

0288 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0289 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0290 : 00100111110000000000000000000000; -- 			jr $31

0291 : 00101100000000000000000010100000; -- 			addi $16 $0 160	 		# start storing into dmem at address 160. (160, 161, 162, 163, 164, 165, 166, 167)

0292 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0293 : 00011000000000000000000100110101; -- 			jal push_31_20_17_16_15_4_1_0

0294 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0295 : 00101101000111100000000000000000; -- 			addi $20 $15 0			# $15 output of jal. Has consolidated register info.

0296 : 00100111110000000000000000000000; -- 			jr $31

0297 : 00101100000000000000000010101010; -- 			addi $16 $0 170	 		# start storing into dmem at address 170. (170, 171, 172, 173, 174, 175, 176, 177)

0298 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0299 : 00011000000000000000000100110101; -- 			jal push_31_20_17_16_15_4_1_0

0300 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0301 : 00101101010111100000000000000000; -- 			addi $21 $15 0			# $15 output of jal. Has consolidated register info.

0302 : 00100111110000000000000000000000; -- 			jr $31

0303 : 00101100000000000000000010110100; -- 			addi $16 $0 180	 		# start storing into dmem at address 170. (180, 181, 182, 183, 184, 185, 186, 187)

0304 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0305 : 00011000000000000000000100110101; -- 			jal push_31_20_17_16_15_4_1_0

0306 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0307 : 00101101100111100000000000000000; -- 			addi $22 $15 0			# $15 output of jal. Has consolidated register info.

0308 : 00100111110000000000000000000000; -- 			jr $31

0309 : 00000011110000000000000000000000; -- 			add $15 $0 $0

0310 : 01000100011000000000000000000000; -- 			lw $17 0($16)		

0311 : 00000100011000100000101010010000; -- 			sll $17 $17 21

0312 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0313 : 01000100011000000000000000000001; -- 			lw $17 1($16)			

0314 : 00101100100000000000000000000111; -- 			addi $18 $0 7

0315 : 00000100101001000000100100010000; -- 			sll $18 $18 18

0316 : 00000100011000100000100100010000; -- 			sll $17 $17 18

0317 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0318 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0319 : 01000100011000000000000000000010; -- 			lw $17 2($16) 			

0320 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0321 : 00000100101001000000100010010000; -- 			sll $18 $18 17

0322 : 00000100011000100000100010010000; -- 			sll $17 $17 17

0323 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0324 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0325 : 01000100011000000000000000000011; -- 			lw $17 3($16) 			

0326 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0327 : 00000100101001000000100000010000; -- 			sll $18 $18 16

0328 : 00000100011000100000100000010000; -- 			sll $17 $17 16

0329 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0330 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0331 : 01000100011000000000000000000100; -- 			lw $17 4($16) 			

0332 : 00101100100000000000011111111111; -- 			addi $18 $0 2047

0333 : 00000100101001000000001010010000; -- 			sll $18 $18 5

0334 : 00000100011000100000001010010000; -- 			sll $17 $17 5

0335 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0336 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0337 : 01000100011000000000000000000101; -- 			lw $17 5($16) 			

0338 : 00101100100000000000000000000111; -- 			addi $18 $0 7

0339 : 00000100101001000000000100010000; -- 			sll $18 $18 2

0340 : 00000100011000100000000100010000; -- 			sll $17 $17 2

0341 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0342 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0343 : 01000100011000000000000000000110; -- 			lw $17 6($16) 			

0344 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0345 : 00000100101001000000000010010000; -- 			sll $18 $18 1

0346 : 00000100011000100000000010010000; -- 			sll $17 $17 1

0347 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0348 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0349 : 01000100011000000000000000000111; -- 			lw $17 7($16) 			

0350 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0351 : 00000100101001000000000000010000; -- 			sll $18 $18 0

0352 : 00000100011000100000000000010000; -- 			sll $17 $17 0

0353 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0354 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0355 : 00100111110000000000000000000000; -- 			jr $31

0356 : 00101011110000000000000000000000; -- 			addi $15 $0 0

0357 : 01000100000000000000000010010110; -- 			lw $16 150($0)			# [31:14] Gametime

0358 : 00000100001000000000011100010000; -- 			sll $16 $16 14

0359 : 00000011110111110000000000000000; -- 			add $15 $15 $16

0360 : 01000100010000000000000010010010; -- 			lw $17 146($0) 			# [13:2] Gravity time remaining.

0361 : 00101100100000000000111111111111; -- 			addi $18 $0 4095

0362 : 00000100101001000000000100010000; -- 			sll $18 $18 2

0363 : 00000100011000100000000100010000; -- 			sll $17 $17 2

0364 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0365 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0366 : 01000100010000000000000010010101; -- 			lw $17 149($0)			# [1:0] Game states

0367 : 00101100100000000000000000000011; -- 			addi $18 $0 3

0368 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0369 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0370 : 00000011100111100000000000000000; -- 			add $14 $15 $0

0371 : 00100111110000000000000000000000; -- 			jr $31 

0372 : 00101000010000000000000000000111; -- 			addi $1 $0 7 	# mask at ...000111

0373 : 00000000010000111101000000001000; -- 			and $1 $1 $29 	

0374 : 00000000010000100000000000010100; -- 			sra $1 $1 0

0375 : 00111000010000000000000010001100; -- 			sw $1 140($0)

0376 : 00101000010000000000000000000111; -- 			addi $1 $0 7   	# mask at ...000111

0377 : 00000000101110100000000110010100; -- 			sra $2 $29 3	# shift $29[5:3] -> $29[2:0]

0378 : 00000000010000100010000000001000; -- 			and $1 $1 $2

0379 : 00111000010000000000000010001101; -- 			sw $1 141($0)

0380 : 00100111110000000000000000000000; -- 	jr $31

0381 : 01000100000111100000000000000001; -- 	    lw $16 1($15)

0382 : 00010100000000000000000000000001; -- 	    bne $16 $0 note_notempty    # jump if note exists

0383 : 00001000000000000000000110000111; -- 	    j note_empty                # else jump to make a note

0384 : 01000100000000000000000010011000; -- 			    lw $16 152($0)   # load note velocity into $16

0385 : 01000100010111100000000000000000; -- 			    lw $17 0($15)

0386 : 00000100011000110000000000000000; -- 			    add $17 $17 $16 # add velocity to high bit note pos

0387 : 00111100010111100000000000000000; -- 			    sw $17 0($15)

0388 : 00001000000000000000000111100001; -- 			 	j is_note_out_of_bounds # Preserve $15! send note dmem location in $15 

0389 : 00001000000000000000000110010010; -- 				j hit_note

0390 : 00100111110000000000000000000000; -- 		    	jr $31          # note's position has been updated, return to game loop

0391 : 01000100000000000000000010010111; -- 			    lw $16 151($0)       # load note pointer into $16

0392 : 01000100011000000000000000000001; -- 			    lw $17 1($16)       # load the time of the next note into $17

0393 : 01000100100000000000000010010110; -- 			    lw $18 150($0)       # load the game loop counter into $18

0394 : 00110100101000100000000000000001; -- 			    blt $18 $17 make_note # if counter is greater than next note time, make note

0395 : 00100111110000000000000000000000; -- 				jr $31              # else, keep note empty, return to game loop

0396 : 01000100000000000000000010010111; -- 					    lw $16 151($0)       # load note pointer into $16

0397 : 01000100011000000000000000000000; -- 					    lw $17 0($16)       # load the value of the next note into $17

0398 : 00111100010111100000000000000001; -- 					    sw $17 1($15)

0399 : 00101100001000000000000000000010; -- 					    addi $16 $16 2       # increment note pointer to next note

0400 : 00111100000000000000000010010111; -- 					    sw $16 151($0)       # store new note pointer into DMEM

0401 : 00100111110000000000000000000000; -- 						jr $31

0402 : 01000000010111100000000000000000; -- 		lw $1 0($15)	# n1_xpos 

0403 : 00101000110000000000000011111111; -- 		addi $3 $0 255 

0404 : 00110000110000100000000001001011; -- 		blt $3 $1 note_outside_hit_range

0405 : 00101000110000000000000100011101; -- 		addi $3 $0 285

0406 : 00110000010001100000000001001001; -- 		blt $1 $3 note_outside_hit_range

0407 : 00001000000000000000001011101110; -- 					j increment_pseudorandom_counter7

0408 : 01000000010111100000000000000001; -- 					lw $1 1($15) # n1_color

0409 : 01000000100000000000000010001100; -- 					lw $2 140($0) # p1_input

0410 : 00000000010000100010000000001000; -- 					and $1 $1 $2 # input color matches note

0411 : 00010000010000000000000000000001; -- 					bne $1 $0 set_n1_p1_hit_true

0412 : 00001000000000000000000110111011; -- 					j end_p1_hit_logic

0413 : 01000000100111100000000000000010; -- 						lw $2 2($15)

0414 : 00010000100000000000000000011100; -- 						bne $2 $0 end_p1_hit_logic

0415 : 00101000010000000000000000000001; -- 							addi $1 $0 1 

0416 : 00111000010111100000000000000010; -- 							sw $1 2($15)

0417 : 01000000010000000000000010001110; -- 								lw $1 142($0)	# n1_xpos

0418 : 00000000010000100011000000000000; -- 								add $1 $1 3

0419 : 00111000010000000000000010001111; -- 								sw $1 143($0)

0420 : 01000001100111100000000000000000; -- 								lw $6 0($15)	# n1_xpos 

0421 : 00001000000000000000001011011110; -- 									j increment_pseudorandom_counter6

0422 : 00101000110000000000000100001001; -- 									addi $3 $0 265 

0423 : 00110000110011000000000000000110; -- 									blt $3 $6 is_pL_in_2_point_range

0424 : 00101000110000000000000100010011; -- 									addi $3 $0 275

0425 : 00110001100001100000000000000100; -- 									blt $6 $3 is_pL_in_2_point_range

0426 : 01000001000000000000000010001110; -- 									lw $4 142($0)		# load p1_powerup_score

0427 : 00101001000010000000000000000011; -- 									addi $4 $4 3		# add 3 to powerup p1_powerup_score

0428 : 00111001000000000000000010001110; -- 									sw $4 142($0)

0429 : 00001000000000000000000110111011; -- 									j calculated_points_pL

0430 : 00101000110000000000000100000100; -- 									addi $3 $0 260 

0431 : 00110000110011000000000000000111; -- 									blt $3 $6 is_pL_in_1_point_range

0432 : 00101000110000000000000100011000; -- 									addi $3 $0 280

0433 : 00110001100001100000000000000101; -- 									blt $6 $3 is_pL_in_1_point_range

0434 : 01000001000000000000000010001110; -- 									lw $4 142($0)		# load p1_powerup_score

0435 : 00101001000010000000000000000010; -- 									addi $4 $4 2		# add 2 to powerup p1_powerup_score

0436 : 00111001000000000000000010001110; -- 									sw $4 142($0)

0437 : 00001000000000000000001011001110; -- 									j increment_pseudorandom_counter5

0438 : 00001000000000000000000110111011; -- 									j calculated_points_pL

0439 : 01000001000000000000000010001110; -- 									lw $4 142($0)		# load p1_powerup_score

0440 : 00101001000010000000000000000001; -- 									addi $4 $4 1		# add 1 to powerup p1_powerup_score

0441 : 00111001000000000000000010001110; -- 									sw $4 142($0)

0442 : 00001000000000000000001010111110; -- 									j increment_pseudorandom_counter4

0443 : 01000000010000000000000010010101; -- 					lw $1 149($0) # if 1 player mode

0444 : 00101000100000000000000000000001; -- 					addi $2 $0 1 # 1 player mode gamestate number

0445 : 00010000010001000000000000000101; -- 					bne $1 $2 player2_hit_ball_logic

0446 : 01000000010000000000000010010100; -- 						lw $1 148($0)	# load pseudorandom number

0447 : 00101000100000000000000000000111; -- 						addi $2 $0 7	# 3 bit mask

0448 : 00000000010000100010000000001000; -- 						and $1 $1 $2 	# isolate bits.

0449 : 00010000010000000000000000011110; -- 						bne $1 $0 end_p2_hit_logic # approx once every 8 gameloops steps, hit the note.

0450 : 00001000000000000000000111001000; -- 						j set_n1_p2_hit_true

0451 : 01000000010111100000000000000001; -- 						lw $1 1($15) # n1 color

0452 : 01000000100000000000000010001101; -- 						lw $2 141($0) # p2_input

0453 : 00000000010000100010000000001000; -- 						and $1 $1 $2 # check for overlap

0454 : 00010000010000000000000000000001; -- 						bne $1 $0 set_n1_p2_hit_true 

0455 : 00001000000000000000000111100000; -- 						j end_p2_hit_logic

0456 : 01000000100111100000000000000011; -- 						lw $2 3($15) # load p2hit_status

0457 : 00010000100000000000000000010110; -- 						bne $2 $0 end_p2_hit_logic # if p2 already hit note, don't hit note again.

0458 : 00101000010000000000000000000001; -- 							addi $1 $0 1

0459 : 00111000010111100000000000000011; -- 							sw $1 3($15)

0460 : 01000001100111100000000000000000; -- 								lw $6 0($15)	# n1_xpos 

0461 : 00101000110000000000000100001001; -- 									addi $3 $0 265 

0462 : 00110000110011000000000000000110; -- 									blt $3 $6 is_pR_in_2_point_range

0463 : 00101000110000000000000100010011; -- 									addi $3 $0 275

0464 : 00110001100001100000000000000100; -- 									blt $6 $3 is_pR_in_2_point_range

0465 : 01000001000000000000000010001111; -- 									lw $4 143($0)		# load p1_powerup_score

0466 : 00101001000010000000000000000011; -- 									addi $4 $4 3		# add 3 to powerup p1_powerup_score

0467 : 00111001000000000000000010001111; -- 									sw $4 143($0)

0468 : 00001000000000000000000111100000; -- 									j calculated_points_pR

0469 : 00101000110000000000000100000100; -- 									addi $3 $0 260 

0470 : 00110000110011000000000000000110; -- 									blt $3 $6 is_pR_in_1_point_range

0471 : 00101000110000000000000100011000; -- 									addi $3 $0 280

0472 : 00110001100001100000000000000100; -- 									blt $6 $3 is_pR_in_1_point_range

0473 : 01000001000000000000000010001111; -- 									lw $4 143($0)		# load p1_powerup_score

0474 : 00101001000010000000000000000010; -- 									addi $4 $4 2		# add 2 to powerup p1_powerup_score

0475 : 00111001000000000000000010001111; -- 									sw $4 143($0)

0476 : 00001000000000000000000111100000; -- 									j calculated_points_pR

0477 : 01000001000000000000000010001111; -- 									lw $4 143($0)		# load p1_powerup_score

0478 : 00101001000010000000000000000001; -- 									addi $4 $4 1		# add 1 to powerup p1_powerup_score

0479 : 00111001000000000000000010001111; -- 									sw $4 143($0)

0480 : 00001000000000000000000110000110; -- 	j end_hit_note

0481 : 01000100000111100000000000000000; -- 		lw $16 0($15) 	# note_x_pos

0482 : 01000100010000000000000000001100; -- 		lw $17 12($0) 	# screen_width

0483 : 00000100011000100000000010010100; -- 		sra $17 $17 1 	# screen_width/2

0484 : 00110100001000100000000000000001; -- 		blt $16 $17 note_is_out_of_bounds

0485 : 00001000000000000000000110000101; -- 			j end_is_note_out_of_bounds

0486 : 01000000010111100000000000000010; -- 				lw $1 2($15)

0487 : 00010000010000000000000000000010; -- 				bne $1 $0 end_p1_missed_note

0488 : 01000000100000000000000000000000; -- 				lw $2 0($0) # load paddle stoptime

0489 : 00111000100000000000000010000100; -- 				sw $2 132($0)

0490 : 01000000010111100000000000000011; -- 				lw $1 3($15)

0491 : 00010000010000000000000000000010; -- 				bne $1 $0 end_p2_missed_note

0492 : 01000000100000000000000000000000; -- 				lw $2 0($0) # load paddle stoptime

0493 : 00111000100000000000000010000101; -- 				sw $2 133($0)

0494 : 00111000000111100000000000000000; -- 				sw $0 0($15)

0495 : 00111000000111100000000000000001; -- 				sw $0 1($15)

0496 : 00111000000111100000000000000010; -- 				sw $0 2($15)

0497 : 00111000000111100000000000000011; -- 				sw $0 3($15)

0498 : 00001000000000000000000110000101; -- 	j end_is_note_out_of_bounds

0499 : 01000000010000000000000010010000; -- 		lw $1 144($0)

0500 : 00101000010000111111111111111111; -- 		addi $1 $1 -1

0501 : 00111000010000000000000010010000; -- 		sw $1 144($0)

0502 : 00010000010000000000000000001010; -- 		bne $1 $0 restart_ball_pos

0503 : 00001000000000000000000000011000; -- 		j start_game_over_screen

0504 : 01000000010000000000000010010001; -- 		lw $1 145($0)

0505 : 00101000010000111111111111111111; -- 		addi $1 $1 -1

0506 : 00111000010000000000000010010001; -- 		sw $1 145($0)

0507 : 00010000010000000000000000000101; -- 		bne $1 $0 restart_ball_pos

0508 : 00001000000000000000000000011000; -- 		j start_game_over_screen

0509 : 01000000110000000000000001111010; -- 		lw $3 122($0)	# $3: Ball x velocity

0510 : 00000001000000000011000000000100; -- 		sub $4 $0 $3 	# Negate x velocity

0511 : 00111001000000000000000001111010; -- 		sw $4 122($0)	# Store new x velocity into function. 

0512 : 00001000000000000000000010110000; -- 		j update_bx

0513 : 01000000010000000000000000010100; -- 		lw $1 20($0)		# b_xpos [31:21]

0514 : 00111000010000000000000001111000; -- 		sw $1 120($0)

0515 : 01000000010000000000000000010101; -- 		lw $1 21($0)		# b_ypos [20:10]

0516 : 00111000010000000000000001111001; -- 		sw $1 121($0)

0517 : 01000000010000000000000000010110; -- 		lw $1 22($0) 		# b_xvel [9:5]

0518 : 00111000010000000000000001111010; -- 		sw $1 122($0)

0519 : 01000000010000000000000000010111; -- 		lw $1 23($0)		# b_yvel [4:0]

0520 : 00111000010000000000000001111011; -- 		sw $1 123($0)

0521 : 00111000000000000000000010000100; -- 		sw $0 132($0)

0522 : 00111000000000000000000010000101; -- 		sw $0 133($0)

0523 : 00001000000000000000000010110000; -- 		j update_bx

0524 : 01000000010000000000000001111101; -- 				lw $1 125($0)	# top_paddleL

0525 : 01000000110000000000000000000110; -- 				lw $3 6($0)	# paddle_length

0526 : 00000000010001100001000000000000; -- 				add $1 $3 $1	# bottom_paddleL

0527 : 01000000100000000000000001111001; -- 				lw $2 121($0)	# top_ball

0528 : 00000000010000100010000000000100; -- 				sub $1 $1 $2	# bottom_paddleR - top_ball

0529 : 00000000110001100000000100010100; -- 				sra $3 $3 2		# paddle_length / 4

0530 : 00110000110000100000000000001100; -- 				blt $3 $1 end_bottom_paddleL_intersect		# paddle_length/4 > (bottom_paddleR - top_ball)

0531 : 01000000010000000000000001111011; -- 				lw $1 123($0)	# ball_old_yvel

0532 : 00101000010000100000000000000011; -- 				addi $1 $1 3 	# ball_new_yvel.

0533 : 01000000100000000000000000000111; -- 				lw $2 7($0) 	# paddle_max_yspeed

0534 : 00110000010001000000000000000001; -- 				blt $1 $2 pL_maximize_ball_yvel # ball_new_yvel > paddle_max_yspeed

0535 : 00001000000000000000001000011011; -- 				j pL_increase_ball_yvel

0536 : 01000000010000000000000000000111; -- 						lw $1 7($0)

0537 : 00111000010000000000000001111011; -- 						sw $1 123($0)

0538 : 00001000000000000000001000011111; -- 						j end_bottom_paddleL_intersect

0539 : 01000000010000000000000001111011; -- 						lw $1 123($0)	# ball y velocity

0540 : 00101000010000100000000000000011; -- 						addi $1 $1 3 	# find new y velocity.

0541 : 00111000010000000000000001111011; -- 						sw $1 123($0) 	# ball y velocity

0542 : 00001000000000000000001000011111; -- 						j end_bottom_paddleL_intersect

0543 : 01000000010000000000000001111101; -- 					lw $1 125($0)	# top_paddleL

0544 : 01000000100000000000000000000110; -- 					lw $2 6($0)	# paddle_length

0545 : 00000000100001000000000100010100; -- 					sra $2 $2 2 	# paddle_length/4

0546 : 01000000110000000000000001111001; -- 					lw $3 121($0)	# top_ball

0547 : 01000001000000000000000000000100; -- 					lw $4 4($0)	# ball_length

0548 : 00000000110001100100000000000000; -- 					add $3 $3 $4	# bottom_ball

0549 : 00000000110001100001000000000100; -- 					sub $3 $3 $1 	# bottom_ball - top_paddleR

0550 : 00110000100001100000000000001110; -- 					blt $2 $3 end_top_paddleL_interesect

0551 : 01000000010000000000000001111011; -- 					lw $1 123($0)	# ball y velocity

0552 : 00101000010000111111111111111101; -- 					addi $1 $1 -3 	# find new y velocity.

0553 : 01000000100000000000000000000111; -- 					lw $2 7($0) 	# paddle_max_yspeed

0554 : 00000000100000000010000000000100; -- 					sub $2 $0 $2	# min_yvel = -1*paddle_max_yspeed

0555 : 00110000100000100000000000000001; -- 					blt $2 $1 minimize_ball_yvel

0556 : 00001000000000000000001000110001; -- 					j reduce_ball_yvel

0557 : 01000000010000000000000000000111; -- 							lw $1 7($0) 	# paddle_max_yspeed

0558 : 00000000010000000001000000000100; -- 							sub $1 $0 $1	# min_yvel = -1*paddle_max_yspeed

0559 : 00111000010000000000000001111011; -- 							sw $1 123($0)

0560 : 00001000000000000000001000110101; -- 							j end_top_paddleL_interesect 

0561 : 01000000010000000000000001111011; -- 							lw $1 123($0)	# ball y velocity

0562 : 00101000010000111111111111111101; -- 							addi $1 $1 -3 	# find new y velocity.

0563 : 00111000010000000000000001111011; -- 							sw $1 123($0) 	# ball y velocity

0564 : 00001000000000000000001000110101; -- 							j end_top_paddleL_interesect

0565 : 01000000110000000000000001111010; -- 			lw $3 122($0)	# $3: Ball x velocity

0566 : 00110000110000011111111001111001; -- 			blt $3 $0 update_bx # If Ball x velocity is positive, keep positive. 

0567 : 00000001000000000011000000000100; -- 			sub $4 $0 $3 	# Negate x velocity

0568 : 00111001000000000000000001111010; -- 			sw $4 122($0)	# Store new x velocity into function. 

0569 : 00001000000000000000000010110000; -- 			j update_bx

0570 : 01000000010000000000000010000001; -- 				lw $1 129($0)	# top_paddleR

0571 : 01000000110000000000000000000110; -- 				lw $3 6($0)	# paddle_length

0572 : 00000000010001100001000000000000; -- 				add $1 $3 $1	# bottom_paddleR

0573 : 01000000100000000000000001111001; -- 				lw $2 121($0)	# top_ball

0574 : 00000000010000100010000000000100; -- 				sub $1 $1 $2	# bottom_paddleR - top_ball

0575 : 00000000110001100000000100010100; -- 				sra $3 $3 2		# paddle_length / 4

0576 : 00110000110000100000000000001100; -- 				blt $3 $1 end_bottom_paddleR_intersect	# paddle_length/4 > bottom_paddleR - top_ball

0577 : 01000000010000000000000001111011; -- 				lw $1 123($0)	# ball_old_yvel

0578 : 00101000010000100000000000000011; -- 				addi $1 $1 3 	# ball_new_yvel.

0579 : 01000000100000000000000000000111; -- 				lw $2 7($0) 	# paddle_max_yspeed

0580 : 00110000010001000000000000000001; -- 				blt $1 $2 pR_maximize_ball_yvel # ball_new_yvel > paddle_max_yspeed

0581 : 00001000000000000000001001001001; -- 				j pR_increase_ball_yvel

0582 : 01000000010000000000000000000111; -- 						lw $1 7($0)

0583 : 00111000010000000000000001111011; -- 						sw $1 123($0)

0584 : 00001000000000000000001001001101; -- 						j end_bottom_paddleR_intersect

0585 : 01000000010000000000000001111011; -- 						lw $1 123($0)	# ball y velocity

0586 : 00101000010000100000000000000011; -- 						addi $1 $1 3 	# find new y velocity.

0587 : 00111000010000000000000001111011; -- 						sw $1 123($0) 	# ball y velocity

0588 : 00001000000000000000001001001101; -- 						j end_bottom_paddleR_intersect

0589 : 01000000010000000000000010000001; -- 				lw $1 129($0)	# top_paddleR

0590 : 01000000100000000000000000000110; -- 				lw $2 6($0)	# paddle_length

0591 : 00000000100001000000000100010100; -- 				sra $2 $2 2 	# paddle_length/4

0592 : 01000000110000000000000001111001; -- 				lw $3 121($0)	# top_ball

0593 : 01000001000000000000000000000100; -- 				lw $4 4($0)	# ball_length

0594 : 00000000110001100100000000000000; -- 				add $3 $3 $4	# bottom_ball

0595 : 00000000110001100001000000000100; -- 				sub $3 $3 $1 	# bottom_ball - top_paddleR

0596 : 00110000100001100000000000001110; -- 				blt $2 $3 end_top_paddleR_interesect

0597 : 01000000010000000000000001111011; -- 					lw $1 123($0)	# ball y velocity

0598 : 00101000010000111111111111111101; -- 					addi $1 $1 -3 	# find new y velocity.

0599 : 01000000100000000000000000000111; -- 					lw $2 7($0) 	# paddle_max_yspeed

0600 : 00000000100000000010000000000100; -- 					sub $2 $0 $2	# min_yvel = -1*paddle_max_yspeed

0601 : 00110000100000100000000000000001; -- 					blt $2 $1 pR_minimize_ball_yvel

0602 : 00001000000000000000001001011111; -- 					j pR_reduce_ball_yvel

0603 : 01000000010000000000000000000111; -- 							lw $1 7($0) 	# paddle_max_yspeed

0604 : 00000000010000000001000000000100; -- 							sub $1 $0 $1	# min_yvel = -1*paddle_max_yspeed

0605 : 00111000010000000000000001111011; -- 							sw $1 123($0)

0606 : 00001000000000000000001001100011; -- 							j end_top_paddleR_interesect 

0607 : 01000000010000000000000001111011; -- 							lw $1 123($0)	# ball y velocity

0608 : 00101000010000111111111111111101; -- 							addi $1 $1 -3 	# find new y velocity.

0609 : 00111000010000000000000001111011; -- 							sw $1 123($0) 	# ball y velocity

0610 : 00001000000000000000001001100011; -- 							j end_top_paddleR_interesect

0611 : 01000000110000000000000001111010; -- 			lw $3 122($0)	# $3: Ball x velocity

0612 : 00110000000001111111111001001011; -- 			blt $0 $3 update_bx # If ball x velocity is negative, keep negative. 

0613 : 00000001000000000011000000000100; -- 			sub $4 $0 $3 	# Negate x velocity

0614 : 00111001000000000000000001111010; -- 			sw $4 122($0)	# Store new x velocity into function. 

0615 : 00001000000000000000000010110000; -- 			j update_bx

0616 : 01000000010000000000000001111011; -- 		lw $1 123($0)	# Ball y velocity

0617 : 00000000010000000001000000000100; -- 		sub $1 $0 $1	# Negate y velocity

0618 : 00111000010000000000000001111011; -- 		sw $1 123($0) 	# Insert new ball velocity into dmem

0619 : 00001000000000000000000010111100; -- 		j update_by

0620 : 01000000110000000000000001111011; -- 		lw $3 123($0)

0621 : 00110000000001111111111001001110; -- 		blt $0 $3 update_by

0622 : 00000000110000000011000000000100; -- 		sub $3 $0 $3 	

0623 : 00111000110000000000000001111011; -- 		sw $3 123($0)

0624 : 00001000000000000000000010111100; -- 		j update_by

0625 : 01000000110000000000000001111011; -- 		lw $3 123($0)

0626 : 00110000110000011111111001001001; -- 		blt $3 $0 update_by

0627 : 00000000110000000011000000000100; -- 		sub $3 $0 $3

0628 : 00111000110000000000000001111011; -- 		sw $3 123($0)

0629 : 00001000000000000000000010111100; -- 		j update_by

0630 : 01000000010000000000000001111101; -- 		lw $1 125($0) 	# paddleL_ypos

0631 : 01000000100000000000000001111111; -- 		lw $2 127($0) 	# paddleL_yvel

0632 : 00000000010000100010000000000000; -- 		add $1 $1 $2 	# paddle_newpos

0633 : 01000000100000000000000000000110; -- 		lw $2 6($0) 	# paddleL_length

0634 : 00000000110000100010000000000000; -- 		add $3 $1 $2 	# paddleL_bottom

0635 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0636 : 00110000110001000000000000000010; -- 		blt $3 $2 set_paddleL_bottomBound # if (paddleBottom > bottom_wall) {set paddle_b to hug bottom wall}

0637 : 00111000010000000000000001111101; -- 		sw $1 125($0)	# store new ypaddlePosition. 

0638 : 00001000000000000000000011010101; -- 		j end_move_paddleL

0639 : 01000000010000000000000000000110; -- 		lw $1 6($0) 	# paddle_length

0640 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0641 : 00000000100001000001000000000100; -- 		sub $2 $2 $1 	# lowest_paddle_y_pos

0642 : 00111000100000000000000001111101; -- 		sw $2 125($0)	# store new ypaddlePosition. 

0643 : 00001000000000000000000011010101; -- 		j end_move_paddleL

0644 : 01000000010000000000000001111101; -- 		lw $1 125($0) 	# paddleL_ypos

0645 : 01000000100000000000000001111111; -- 		lw $2 127($0) 	# paddleL_yvel

0646 : 00000000010000100010000000000100; -- 		sub $1 $1 $2 	# paddle_newpos

0647 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# top_wall

0648 : 00110000100000100000000000000010; -- 		blt $2 $1 set_paddleL_upperBound # if (topwall > paddle_newpos) {set paddle_t top top wall}

0649 : 00111000010000000000000001111101; -- 		sw $1 125($0)	# store new ypaddlePosition. 

0650 : 00001000000000000000000011010101; -- 		j end_move_paddleL

0651 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# upper_wall

0652 : 00111000100000000000000001111101; -- 		sw $2 125($0)	# store new ypaddlePosition. 

0653 : 00001000000000000000000011010101; -- 		j end_move_paddleL

0654 : 01000000010000000000000010000001; -- 		lw $1 129($0) 	# paddleL_ypos

0655 : 01000000100000000000000010000011; -- 		lw $2 131($0) 	# paddleL_yvel

0656 : 00000000010000100010000000000000; -- 		add $1 $1 $2 	# paddle_newpos

0657 : 01000000100000000000000000000110; -- 		lw $2 6($0) 	# paddleL_length

0658 : 00000000110000100010000000000000; -- 		add $3 $1 $2 	# paddleL_bottom

0659 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0660 : 00110000110001000000000000000010; -- 		blt $3 $2 set_paddleR_bottomBound # if (paddleBottom > bottom_wall) {set paddle_b to hug bottom wall}

0661 : 00111000010000000000000010000001; -- 		sw $1 129($0)	# store new ypaddlePosition. 

0662 : 00001000000000000000000011101010; -- 		j end_move_paddleR

0663 : 01000000010000000000000000000110; -- 		lw $1 6($0) 	# paddle_length

0664 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0665 : 00000000100001000001000000000100; -- 		sub $2 $2 $1 	# lowest_paddle_y_pos

0666 : 00111000100000000000000010000001; -- 		sw $2 129($0)	# store new ypaddlePosition. 

0667 : 00001000000000000000000011101010; -- 		j end_move_paddleR

0668 : 01000000010000000000000010000001; -- 		lw $1 129($0) 	# paddleL_ypos

0669 : 01000000100000000000000010000011; -- 		lw $2 131($0) 	# paddleL_yvel

0670 : 00000000010000100010000000000100; -- 		sub $1 $1 $2 	# paddle_newpos

0671 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# top_wall

0672 : 00110000100000100000000000000010; -- 		blt $2 $1 set_paddleR_upperBound # if (topwall > paddle_newpos) {set paddle_t top top wall}

0673 : 00111000010000000000000010000001; -- 		sw $1 129($0)	# store new ypaddlePosition. 

0674 : 00001000000000000000000011101010; -- 		j end_move_paddleR

0675 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# upper_wall

0676 : 00111000100000000000000010000001; -- 		sw $2 129($0)	# store new ypaddlePosition. 

0677 : 00001000000000000000000011101010; -- 		j end_move_paddleR

0678 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0679 : 00101000010000100000000000000101; -- 	addi $1 $1 5

0680 : 00101000100000000111111111111111; -- 	addi $2 $0 32767 # [14:0] mask

0681 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0682 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0683 : 00001000000000000000000000000100; -- j end_increment_pseudorandom_counter1

0684 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0685 : 00101000010000100000000000000110; -- 	addi $1 $1 6

0686 : 00101000100000000111111111111111; -- 	addi $2 $0 32767 # [14:0] mask

0687 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0688 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0689 : 00001000000000000000000000011101; -- j end_increment_pseudorandom_counter2

0690 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0691 : 00101000010000100000000000000001; -- 	addi $1 $1 1

0692 : 01000000110000000000000001111000; -- 	lw $3 120($0)

0693 : 00000000010001100001000000000000; -- 	add $1 $3 $1

0694 : 01000000110000000000000001111011; -- 	lw $3 123($0)

0695 : 00000000010001100001000000000000; -- 	add $1 $3 $1

0696 : 01000000110000000000000010010010; -- 	lw $3 146($0)

0697 : 00000000010001100001000000000000; -- 	add $1 $3 $1

0698 : 00101000100000000111111111111111; -- 	addi $2 $0 32767 # [14:0] mask

0699 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0700 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0701 : 00001000000000000000000001101010; -- j end_increment_pseudorandom_counter3

0702 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0703 : 00101000010000100000000000000001; -- 	addi $1 $1 1

0704 : 01000000100000000000000010001110; -- 	lw $2 142($0)

0705 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0706 : 01000000100000000000000010010000; -- 	lw $2 144($0)

0707 : 00000000010001000001000000000000; -- 	add $1 $2 $1	

0708 : 01000000100000000000000010010001; -- 	lw $2 145($0)

0709 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0710 : 01000000100000000000000010010010; -- 	lw $2 146($0)

0711 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0712 : 01000000100000000000000010010110; -- 	lw $2 150($0)

0713 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0714 : 00101000100000000111111111111111; -- 	addi $2 $0 32767

0715 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0716 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0717 : 00001000000000000000000110111011; -- j end_increment_pseudorandom_counter4

0718 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0719 : 00101000010000100000000000000010; -- 	addi $1 $1 2

0720 : 01000000100000000000000010001110; -- 	lw $2 142($0)

0721 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0722 : 01000000100000000000000010010000; -- 	lw $2 144($0)

0723 : 00000000010001000001000000000000; -- 	add $1 $2 $1	

0724 : 01000000100000000000000010010001; -- 	lw $2 145($0)

0725 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0726 : 01000000100000000000000010010010; -- 	lw $2 146($0)

0727 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0728 : 01000000100000000000000010010110; -- 	lw $2 150($0)

0729 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0730 : 00101000100000000111111111111111; -- 	addi $2 $0 32767

0731 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0732 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0733 : 00001000000000000000000110110110; -- j end_increment_pseudorandom_counter5

0734 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0735 : 00101000010000100000000000000011; -- 	addi $1 $1 3

0736 : 01000000100000000000000010001110; -- 	lw $2 142($0)

0737 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0738 : 01000000100000000000000010010000; -- 	lw $2 144($0)

0739 : 00000000010001000001000000000000; -- 	add $1 $2 $1	

0740 : 01000000100000000000000010010001; -- 	lw $2 145($0)

0741 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0742 : 01000000100000000000000010010010; -- 	lw $2 146($0)

0743 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0744 : 01000000100000000000000010010110; -- 	lw $2 150($0)

0745 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0746 : 00101000100000000111111111111111; -- 	addi $2 $0 32767

0747 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0748 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0749 : 00001000000000000000000110100110; -- j end_increment_pseudorandom_counter6

0750 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0751 : 00101000010000100000000000000011; -- 	addi $1 $1 3

0752 : 01000000100000000000000010001110; -- 	lw $2 142($0)

0753 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0754 : 01000000100000000000000010010000; -- 	lw $2 144($0)

0755 : 00000000010001000001000000000000; -- 	add $1 $2 $1	

0756 : 01000000100000000000000010010001; -- 	lw $2 145($0)

0757 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0758 : 01000000100000000000000010010010; -- 	lw $2 146($0)

0759 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0760 : 01000000100000000000000010010110; -- 	lw $2 150($0)

0761 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0762 : 00101000100000000111111111111111; -- 	addi $2 $0 32767

0763 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0764 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0765 : 00001000000000000000000110011000; -- j end_increment_pseudorandom_counter7

[0766..4095] : 00000000000000000000000000000000;
END;