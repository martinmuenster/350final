DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 01000000010000000000000000010100; -- 	lw $1 20($0)		# b_xpos [31:21]

0001 : 00111000010000000000000001111000; -- 	sw $1 120($0)

0002 : 01000000010000000000000000010101; -- 	lw $1 21($0)		# b_ypos [20:10]

0003 : 00111000010000000000000001111001; -- 	sw $1 121($0)

0004 : 01000000010000000000000000010110; -- 	lw $1 22($0) 		# b_xvel [9:5]

0005 : 00111000010000000000000001111010; -- 	sw $1 122($0)

0006 : 01000000010000000000000000010111; -- 	lw $1 23($0)		# b_yvel [4:0]

0007 : 00111000010000000000000001111011; -- 	sw $1 123($0)

0008 : 01000000010000000000000000011000; -- 	lw $1 24($0)		# pL_xpos [31:21]

0009 : 00111000010000000000000001111100; -- 	sw $1 124($0)

0010 : 01000000010000000000000000011001; -- 	lw $1 25($0)		# pL_ypos [20:10]

0011 : 00111000010000000000000001111101; -- 	sw $1 125($0)

0012 : 01000000010000000000000000011010; -- 	lw $1 26($0) 		# pR_xvel [9:5]

0013 : 00111000010000000000000001111110; -- 	sw $1 126($0)

0014 : 01000000010000000000000000011011; -- 	lw $1 27($0)		# pR_yvel [4:0]

0015 : 00111000010000000000000001111111; -- 	sw $1 127($0)

0016 : 01000000010000000000000000011100; -- 	lw $1 28($0)		# pL_xpos [31:21]

0017 : 00111000010000000000000010000000; -- 	sw $1 128($0)

0018 : 01000000010000000000000000011101; -- 	lw $1 29($0)		# pL_ypos [20:10]

0019 : 00111000010000000000000010000001; -- 	sw $1 129($0)

0020 : 01000000010000000000000000011110; -- 	lw $1 30($0) 		# pR_xvel [9:5]

0021 : 00111000010000000000000010000010; -- 	sw $1 130($0)

0022 : 01000000010000000000000000011111; -- 	lw $1 31($0)		# pR_yvel [4:0]

0023 : 00111000010000000000000010000011; -- 	sw $1 131($0)

0024 : 01000000010000000000000000110010; -- 	lw $1 50($0) 		# gametime

0025 : 00111000010000000000000010010110; -- 	sw $1 150($0)

0026 : 01000000010000000000000000110011; -- 	lw $1 51($0) 		# note pointer

0027 : 00111000010000000000000010010111; -- 	sw $1 151($0)

0028 : 01000000010000000000000000110100; -- 	lw $1 52($0) 		# note speed

0029 : 00111000010000000000000010011000; -- 	sw $1 152($0)

0030 : 00000000010000000000000000000000; -- 		add $1 $0 $0

0031 : 01000000100000000000000000001000; -- 		lw $2 8($0)						

0032 : 00101000010000100000000000000001; -- 			addi $1 $1 1

0033 : 00010000010001011111111111111110; -- 			bne $1 $2 counterincrement

0034 : 00001000000000000000000010010011; -- 	j update_vga_registers

0035 : 00001000000000000000000100000100; -- 	j store_inputs_into_dmem

0036 : 01000000010000000000000010010110; -- 		lw $1 150($0)

0037 : 00101000010000100000000000000001; -- 		addi $1 $1 1

0038 : 00111000010000000000000010010110; -- 		sw $1 150($0)

0039 : 00101011110000000000000010100000; -- 		    addi $15 $0 160      # move note data to temp func reg

0040 : 00011000000000000000000100001101; -- 		    jal check_note # update note 1

0041 : 00101011110000000000000010100100; -- 		    addi $15 $0 164 

0042 : 00011000000000000000000100001101; -- 		    jal check_note  # update note 2

0043 : 00101011110000000000000010101010; -- 		    addi $15 $0 170     # move note data to temp func reg

0044 : 00011000000000000000000100001101; -- 		    jal check_note # update note 3

0045 : 00101011110000000000000010101110; -- 		    addi $15 $0 174 

0046 : 00011000000000000000000100001101; -- 		    jal check_note  # update note 4

0047 : 00101011110000000000000010110100; -- 		    addi $15 $0 180     # move note data to temp func reg

0048 : 00011000000000000000000100001101; -- 		    jal check_note # update note 5

0049 : 00101011110000000000000010111000; -- 		    addi $15 $0 184 

0050 : 00011000000000000000000100001101; -- 		    jal check_note  # update note 6

0051 : 01000000010000000000000000001011; -- 					lw $1 11($0) 				# left_wall

0052 : 01000000100000000000000001111000; -- 					lw $2 120($0)				# ballxpos																

0053 : 00110000010001000000000100001110; -- 					blt $1 $2 hit_left_wall 	# ballxpos < left_wall

0054 : 01000000010000000000000000001100; -- 					lw $1 12($0)				# right_wall

0055 : 01000000100000000000000000000100; -- 					lw $2 4($0) 				# ball_length

0056 : 01000000110000000000000001111000; -- 					lw $3 120($0) 				# ballxpos

0057 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# ballxpos + ball_length = ball_right_boundry

0058 : 00110000110000100000000100001001; -- 					blt $3 $1 hit_right_wall	# ball_right_boundry < right_wall { hit right wall }

0059 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0060 : 01000000100000000000000001111101; -- 					lw $2 125($0)				# t_paddleL

0061 : 01000000110000000000000000000110; -- 					lw $3 6($0)					# paddle_length

0062 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# t_paddleL + paddle_length = b_paddleL

0063 : 00110000010001100000000000010000; -- 					blt $1 $3 end_lp_coll_check # if (top_ball > b_paddleL) { no left paddle collision }

0064 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0065 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# b_length

0066 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# b_ball = t_ball + b_length

0067 : 01000000100000000000000001111101; -- 					lw $2 125($0) 				# t_paddleL

0068 : 00110000100000100000000000001011; -- 					blt $2 $1 end_lp_coll_check # if (t_paddleL > b_ball) { no left paddle collision }

0069 : 01000000010000000000000001111100; -- 					lw $1 124($0) 				# l_paddleL

0070 : 01000000100000000000000000000101; -- 					lw $2 5($0) 	 			# paddle_width

0071 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# r_paddleL = l_paddleL + paddle_width

0072 : 01000000100000000000000001111000; -- 					lw $2 120($0) 				# l_ball

0073 : 00110000100000100000000000000110; -- 					blt $2 $1 end_lp_coll_check # l_ball > r_paddleL

0074 : 01000000010000000000000001111100; -- 					lw $1 124($0) 				# l_paddleL

0075 : 01000000100000000000000001111000; -- 					lw $2 120($0) 				# l_ball

0076 : 01000000110000000000000000000100; -- 					lw $3 4($0)					# ball_length

0077 : 00000000100001000011000000000000; -- 					add $2 $2 $3				# r_ball

0078 : 00110000010001000000000000000001; -- 					blt $1 $2 end_lp_coll_check # l_paddleL > r_ball

0079 : 00001000000000000000000101001000; -- 					j hit_paddleL

0080 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0081 : 01000000100000000000000010000001; -- 					lw $2 129($0)				# t_paddleR

0082 : 01000000110000000000000000000110; -- 					lw $3 6($0)					# paddle_length

0083 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# t_paddleR + paddle_length = b_paddleR

0084 : 00110000010001100000000000010000; -- 					blt $1 $3 end_rp_coll_check # if (top_ball > b_paddleR) { no left paddle collision }

0085 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0086 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# b_length

0087 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# b_ball = t_ball + b_length

0088 : 01000000100000000000000010000001; -- 					lw $2 129($0) 				# t_paddleR

0089 : 00110000100000100000000000001011; -- 					blt $2 $1 end_rp_coll_check # if (t_paddleR > b_ball) { no left paddle collision }

0090 : 01000000010000000000000001111000; -- 					lw $1 120($0) 				# l_ball

0091 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# ball_length

0092 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# r_ball = l_BALL + ball_length

0093 : 01000000100000000000000010000000; -- 					lw $2 128($0) 				# l_paddleR

0094 : 00110000100000100000000000000110; -- 					blt $2 $1 end_rp_coll_check # l_paddleR > r_BALL

0095 : 01000000010000000000000001111000; -- 					lw $1 120($0) 				# l_ball

0096 : 01000000100000000000000010000000; -- 					lw $2 128($0)				# l_paddleR

0097 : 01000000110000000000000000000101; -- 					lw $3 5($0)					# paddle_width

0098 : 00000000100001000011000000000000; -- 					add $2 $2 $3  				# r_paddleR

0099 : 00110000010001000000000000000001; -- 					blt $1 $2 end_rp_coll_check # l_ball > r_paddleR

0100 : 00001000000000000000000101110110; -- 					j hit_paddleR

0101 : 00001000000000000000000001100110; -- 					j update_bx

0102 : 01000000010000000000000001111000; -- 				lw $1 120($0) 	# $1: Ball x position.

0103 : 01000000110000000000000001111010; -- 				lw $3 122($0)	# $3: Ball x velocity

0104 : 00000001000000100011000000000000; -- 				add $4 $1 $3	# $6: newx = oldx + deltax

0105 : 00111001000000000000000001111000; -- 				sw $4 120($0)	# store newx

0106 : 01000000010000000000000000001001; -- 					lw $1 9($0)					# top_wall_pos

0107 : 01000000100000000000000001111001; -- 					lw $2 121($0) 				# ball_y_pos

0108 : 00110000010001000000000100110111; -- 					blt $1 $2 hit_top_wall		# top_wall_pos > ball_y_pos

0109 : 01000000010000000000000000001010; -- 					lw $1 10($0)				# bottom_wall_pos

0110 : 01000000100000000000000001111001; -- 					lw $2 121($0) 				# ball_y_pos

0111 : 01000000110000000000000000000100; -- 					lw $3 4($0)		 			# ball_length

0112 : 00000000110001100010000000000000; -- 					add $3 $3 $2 				# ball_ypos + ball_length = ball_bottom_boundry

0113 : 00110000110000100000000100110010; -- 					blt $3 $1 hit_bottom_wall 	# if (ball_bottom_boundry > bottom_wall_pos) { hit_bottom_wall }

0114 : 01000000010000000000000001111001; -- 				lw $1 121($0) 					# ball_oldypos

0115 : 01000000100000000000000001111011; -- 				lw $2 123($0)					# ballyvel

0116 : 00000000100001000001000000000000; -- 				add $2 $2 $1					# newy = ball_oldypos + ballyvel

0117 : 00111000100000000000000001111001; -- 				sw $2 121($0) 					# store newy into 121.

0118 : 01000000010000000000000001111000; -- 			lw $1 120($0) 	# ballX 

0119 : 01000000100000000000000000000100; -- 			lw $2 4($0)	# ball_length

0120 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# ball_length/2

0121 : 00000000010000100010000000000000; -- 			add $1 $1 $2 	# center_x of ball

0122 : 01000000100000000000000000001100; -- 			lw $2 12($0)	# wall_width

0123 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# wall_width/2

0124 : 00110000010001000000000000000111; -- 			blt $1 $2 end_move_paddleL		# center_x_ball > wall_width/2

0125 : 01000000010000000000000001111101; -- 			lw $1 125($0) # paddleL_ypos

0126 : 01000000100000000000000000000110; -- 			lw $2 6($0) # paddleL_length

0127 : 00000000100001000000000010010100; -- 			sra $2 $2 1	#  paddleL_length/2

0128 : 00000000100001000001000000000000; -- 			add $2 $2 $1 # paddleL_ymid = paddle_length/2 + paddle_ypos

0129 : 01000000110000000000000001111001; -- 			lw $3 121($0) # ball_ypos

0130 : 00110000110001000000000100100101; -- 			blt $3 $2 move_paddleL_down # if ball_ypos > paddleL_ymid

0131 : 00110000100001100000000100110010; -- 			blt $2 $3 move_paddleL_up # if paddleL_ymid > ball_ypos

0132 : 01000000010000000000000001111000; -- 			lw $1 120($0) 	# ballX 

0133 : 01000000100000000000000000000100; -- 			lw $2 4($0)	# ball_length

0134 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# ball_length/2

0135 : 00000000010000100010000000000000; -- 			add $1 $1 $2 	# center_x of ball

0136 : 01000000100000000000000000001100; -- 			lw $2 12($0)	# wall_width

0137 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# wall_width/2

0138 : 00110000100000100000000000000111; -- 			blt $2 $1 end_move_paddleR		# wall_width/2 > center_x_ball

0139 : 01000000010000000000000010000001; -- 			lw $1 129($0) # paddleL_ypos

0140 : 01000000100000000000000000000110; -- 			lw $2 6($0) # paddleL_length

0141 : 00000000100001000000000010010100; -- 			sra $2 $2 1	#  paddleL_length/2

0142 : 00000000100001000001000000000000; -- 			add $2 $2 $1 # paddleL_ymid = paddle_length/2 + paddle_ypos

0143 : 01000000110000000000000001111001; -- 			lw $3 121($0) # ball_ypos

0144 : 00110000110001000000000100101111; -- 			blt $3 $2 move_paddleR_down # if ball_ypos > paddleL_ymid

0145 : 00110000100001100000000100111100; -- 			blt $2 $3 move_paddleR_up # if paddleL_ymid > ball_ypos

0146 : 00001000000000000000000000011110; -- 	j bufferloop

0147 : 00011000000000000000000010011010; -- 		jal push_to_reg10

0148 : 00011000000000000000000010100000; -- 		jal push_to_reg11

0149 : 00011000000000000000000010100110; -- 		jal push_to_reg12

0150 : 00011000000000000000000011000011; -- 		jal push_to_reg20

0151 : 00011000000000000000000011001001; -- 		jal push_to_reg21

0152 : 00011000000000000000000011001111; -- 		jal push_to_reg22

0153 : 00001000000000000000000000100011; -- 		j updated_vga_registers

0154 : 00101100000000000000000001111000; -- 			addi $16 $0 120 		# start storing into dmem at address 120. (120, 121, 122, 123)

0155 : 00000111101111100000000000000000; -- 			add $30 $31 $0

0156 : 00011000000000000000000010101100; -- 			jal push_31_20_9_4

0157 : 00000111111111000000000000000000; -- 			add $31 $30 $0

0158 : 00101010100111100000000000000000; -- 			addi $10 $15 0			# $15 output of jal. Has consolidated register info.

0159 : 00100111110000000000000000000000; -- 			jr $31

0160 : 00101100000000000000000001111100; -- 			addi $16 $0 124 		# start storing into dmem at address 120. (120, 121, 122, 123)

0161 : 00000111101111100000000000000000; -- 			add $30 $31 $0

0162 : 00011000000000000000000010101100; -- 			jal push_31_20_9_4

0163 : 00000111111111000000000000000000; -- 			add $31 $30 $0

0164 : 00101010110111100000000000000000; -- 			addi $11 $15 0			# $15 output of jal. Has consolidated register info.

0165 : 00100111110000000000000000000000; -- 			jr $31

0166 : 00101100000000000000000010000000; -- 			addi $16 $0 128 		# start storing into dmem at address 120. (120, 121, 122, 123)

0167 : 00000111101111100000000000000000; -- 			add $30 $31 $0

0168 : 00011000000000000000000010101100; -- 			jal push_31_20_9_4

0169 : 00000111111111000000000000000000; -- 			add $31 $30 $0

0170 : 00101011000111100000000000000000; -- 			addi $12 $15 0			# $15 output of jal. Has consolidated register info.

0171 : 00100111110000000000000000000000; -- 			jr $31

0172 : 00000011110000000000000000000000; -- 			add $15 $0 $0

0173 : 01000100011000000000000000000000; -- 			lw $17 0($16)			# [31:21]

0174 : 00000100011000100000101010010000; -- 			sll $17 $17 21

0175 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0176 : 01000100011000000000000000000001; -- 			lw $17 1($16)			# [20:10]

0177 : 00101100100000000000011111111111; -- 			addi $18 $0 2047

0178 : 00000100101001000000010100010000; -- 			sll $18 $18 10

0179 : 00000100011000100000010100010000; -- 			sll $17 $17 10

0180 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0181 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0182 : 01000100011000000000000000000010; -- 			lw $17 2($16) 			# [9:5]

0183 : 00101100100000000000000000011111; -- 			addi $18 $0 31

0184 : 00000100101001000000001010010000; -- 			sll $18 $18 5

0185 : 00000100011000100000001010010000; -- 			sll $17 $17 5

0186 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0187 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0188 : 01000100011000000000000000000011; -- 			lw $17 3($16)			# [4:0]

0189 : 00101100100000000000000000011111; -- 			addi $18 $0 31

0190 : 00000100101001000000000000010000; -- 			sll $18 $18 0

0191 : 00000100011000100000000000010000; -- 			sll $17 $17 0

0192 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0193 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0194 : 00100111110000000000000000000000; -- 			jr $31

0195 : 00101100000000000000000010100000; -- 			addi $16 $0 160	 		# start storing into dmem at address 160. (160, 161, 162, 163, 164, 165, 166, 167)

0196 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0197 : 00011000000000000000000011010101; -- 			jal push_31_20_17_16_15_4_1_0

0198 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0199 : 00101101000111100000000000000000; -- 			addi $20 $15 0			# $15 output of jal. Has consolidated register info.

0200 : 00100111110000000000000000000000; -- 			jr $31

0201 : 00101100000000000000000010101010; -- 			addi $16 $0 170	 		# start storing into dmem at address 170. (170, 171, 172, 173, 174, 175, 176, 177)

0202 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0203 : 00011000000000000000000011010101; -- 			jal push_31_20_17_16_15_4_1_0

0204 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0205 : 00101101010111100000000000000000; -- 			addi $21 $15 0			# $15 output of jal. Has consolidated register info.

0206 : 00100111110000000000000000000000; -- 			jr $31

0207 : 00101100000000000000000010110100; -- 			addi $16 $0 180	 		# start storing into dmem at address 170. (180, 181, 182, 183, 184, 185, 186, 187)

0208 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0209 : 00011000000000000000000011010101; -- 			jal push_31_20_17_16_15_4_1_0

0210 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0211 : 00101101100111100000000000000000; -- 			addi $22 $15 0			# $15 output of jal. Has consolidated register info.

0212 : 00100111110000000000000000000000; -- 			jr $31

0213 : 00000011110000000000000000000000; -- 			add $15 $0 $0

0214 : 01000100011000000000000000000000; -- 			lw $17 0($16)		

0215 : 00000100011000100000101010010000; -- 			sll $17 $17 21

0216 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0217 : 01000100011000000000000000000001; -- 			lw $17 1($16)			

0218 : 00101100100000000000000000000111; -- 			addi $18 $0 7

0219 : 00000100101001000000100100010000; -- 			sll $18 $18 18

0220 : 00000100011000100000100100010000; -- 			sll $17 $17 18

0221 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0222 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0223 : 01000100011000000000000000000010; -- 			lw $17 2($16) 			

0224 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0225 : 00000100101001000000100010010000; -- 			sll $18 $18 17

0226 : 00000100011000100000100010010000; -- 			sll $17 $17 17

0227 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0228 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0229 : 01000100011000000000000000000011; -- 			lw $17 3($16) 			

0230 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0231 : 00000100101001000000100000010000; -- 			sll $18 $18 16

0232 : 00000100011000100000100000010000; -- 			sll $17 $17 16

0233 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0234 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0235 : 01000100011000000000000000000100; -- 			lw $17 4($16) 			

0236 : 00101100100000000000011111111111; -- 			addi $18 $0 2047

0237 : 00000100101001000000001010010000; -- 			sll $18 $18 5

0238 : 00000100011000100000001010010000; -- 			sll $17 $17 5

0239 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0240 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0241 : 01000100011000000000000000000101; -- 			lw $17 5($16) 			

0242 : 00101100100000000000000000000111; -- 			addi $18 $0 7

0243 : 00000100101001000000000100010000; -- 			sll $18 $18 2

0244 : 00000100011000100000000100010000; -- 			sll $17 $17 2

0245 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0246 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0247 : 01000100011000000000000000000110; -- 			lw $17 6($16) 			

0248 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0249 : 00000100101001000000000010010000; -- 			sll $18 $18 1

0250 : 00000100011000100000000010010000; -- 			sll $17 $17 1

0251 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0252 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0253 : 01000100011000000000000000000111; -- 			lw $17 7($16) 			

0254 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0255 : 00000100101001000000000000010000; -- 			sll $18 $18 0

0256 : 00000100011000100000000000010000; -- 			sll $17 $17 0

0257 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0258 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0259 : 00100111110000000000000000000000; -- 			jr $31

0260 : 00101000010000000000000000000111; -- 			addi $1 $0 7 	# mask at ...000111

0261 : 00000000010000111101000000001000; -- 			and $1 $1 $29 	

0262 : 00000000010000100000000000010100; -- 			sra $1 $1 0

0263 : 00111000010000000000000010001100; -- 			sw $1 140($0)

0264 : 00101000010000000000000000000111; -- 			addi $1 $0 7   	# mask at ...000111

0265 : 00000000101110100000000110010100; -- 			sra $2 $29 3	# shift $29[5:3] -> $29[2:0]

0266 : 00000000010000100010000000001000; -- 			and $1 $1 $2

0267 : 00111000010000000000000010001101; -- 			sw $1 141($0)

0268 : 00001000000000000000000000100100; -- 	j stored_inputs_into_dmem

0269 : 01000100000111100000000000000001; -- 	    lw $16 1($15)

0270 : 00010100000000000000000000000001; -- 	    bne $16 $0 note_notempty    # jump if note exists

0271 : 00001000000000000000000100010111; -- 	    j note_empty                # else jump to make a note

0272 : 01000100000000000000000010011000; -- 			    lw $16 152($0)   # load note velocity into $16

0273 : 01000100010111100000000000000000; -- 			    lw $17 0($15)

0274 : 00000100011000110000000000000000; -- 			    add $17 $17 $16 # add velocity to high bit note pos

0275 : 00111100010111100000000000000000; -- 			    sw $17 0($15)

0276 : 00001000000000000000000100111010; -- 			 	j is_note_out_of_bounds # Preserve $15! send note dmem location in $15 

0277 : 00001000000000000000000100100010; -- 		 		j hit_note

0278 : 00100111110000000000000000000000; -- 		    	jr $31          # note's position has been updated, return to game loop

0279 : 01000100000000000000000010010111; -- 			    lw $16 151($0)       # load note pointer into $16

0280 : 01000100011000000000000000000001; -- 			    lw $17 1($16)       # load the time of the next note into $17

0281 : 01000100100000000000000010010110; -- 			    lw $18 150($0)       # load the game loop counter into $18

0282 : 00110100101000100000000000000001; -- 			    blt $18 $17 make_note # if counter is greater than next note time, make note

0283 : 00100111110000000000000000000000; -- 				jr $31              # else, keep note empty, return to game loop

0284 : 01000100000000000000000010010111; -- 					    lw $16 151($0)       # load note pointer into $16

0285 : 01000100011000000000000000000000; -- 					    lw $17 0($16)       # load the value of the next note into $17

0286 : 00111100010111100000000000000001; -- 					    sw $17 1($15)

0287 : 00101100001000000000000000000010; -- 					    addi $16 $16 2       # increment note pointer to next note

0288 : 00111100000000000000000010010111; -- 					    sw $16 151($0)       # store new note pointer into DMEM

0289 : 00100111110000000000000000000000; -- 						jr $31

0290 : 01000000010111100000000000000000; -- 		lw $1 0($15)	# n1_xpos 

0291 : 00101000110000000000000011111111; -- 		addi $3 $0 255 

0292 : 00110000110000100000000000010100; -- 		blt $3 $1 note_outside_hit_range

0293 : 00101000110000000000000100011101; -- 		addi $3 $0 285

0294 : 00110000010001100000000000010010; -- 		blt $1 $3 note_outside_hit_range

0295 : 01000000010111100000000000000001; -- 					lw $1 1($15) # n1_color

0296 : 01000000100000000000000010001100; -- 					lw $2 140($0) # p1_input

0297 : 00000000010000100010000000001000; -- 					and $1 $1 $2 # input color matches note

0298 : 00010000010000000000000000000001; -- 					bne $1 $0 set_n1_p1_hit_true

0299 : 00001000000000000000000100110000; -- 					j end_p1_hit_logic

0300 : 01000000100111100000000000000010; -- 						lw $2 2($15)

0301 : 00010000100000000000000000000010; -- 						bne $2 $0 end_p1_hit_logic

0302 : 00101000010000000000000000000001; -- 							addi $1 $0 1 

0303 : 00111000010111100000000000000010; -- 							sw $1 2($15)

0304 : 01000000010111100000000000000001; -- 					lw $1 1($15) # n1 color

0305 : 01000000100000000000000010001101; -- 					lw $2 141($0) # p2_input

0306 : 00000000010000100010000000001000; -- 					and $1 $1 $2 # check for overlap

0307 : 00010000010000000000000000000001; -- 					bne $1 $0 set_n1_p2_hit_true 

0308 : 00001000000000000000000100111001; -- 					j end_p2_hit_logic

0309 : 01000000100111100000000000000011; -- 						lw $2 3($15) # load p2hit_status

0310 : 00010000100000000000000000000010; -- 						bne $2 $0 end_p2_hit_logic # if p2 already hit note, don't hit note again.

0311 : 00101000010000000000000000000001; -- 							addi $1 $0 1

0312 : 00111000010111100000000000000011; -- 							sw $1 3($15)

0313 : 00001000000000000000000100010110; -- 	j end_hit_note

0314 : 01000100000111100000000000000000; -- 		lw $16 0($15) 	# note_x_pos

0315 : 01000100010000000000000000001100; -- 		lw $17 12($0) 	# screen_width

0316 : 00000100011000100000000010010100; -- 		sra $17 $17 1 	# screen_width/2

0317 : 00110100001000100000000000000001; -- 		blt $16 $17 erase_note

0318 : 00001000000000000000000100010101; -- 			j end_is_note_out_of_bounds

0319 : 00111000000111100000000000000000; -- 			sw $0 0($15)

0320 : 00111000000111100000000000000001; -- 			sw $0 1($15)

0321 : 00111000000111100000000000000010; -- 			sw $0 2($15)

0322 : 00111000000111100000000000000011; -- 			sw $0 3($15)

0323 : 00001000000000000000000100010101; -- 	j end_is_note_out_of_bounds

0324 : 01000000110000000000000001111010; -- 		lw $3 122($0)	# $3: Ball x velocity

0325 : 00000001000000000011000000000100; -- 		sub $4 $0 $3 	# Negate x velocity

0326 : 00111001000000000000000001111010; -- 		sw $4 122($0)	# Store new x velocity into function. 

0327 : 00001000000000000000000001100110; -- 		j update_bx

0328 : 01000000010000000000000001111101; -- 				lw $1 125($0)	# top_paddleL

0329 : 01000000110000000000000000000110; -- 				lw $3 6($0)	# paddle_length

0330 : 00000000010001100001000000000000; -- 				add $1 $3 $1	# bottom_paddleL

0331 : 01000000100000000000000001111001; -- 				lw $2 121($0)	# top_ball

0332 : 00000000010000100010000000000100; -- 				sub $1 $1 $2	# bottom_paddleR - top_ball

0333 : 00000000110001100000000100010100; -- 				sra $3 $3 2		# paddle_length / 4

0334 : 00110000110000100000000000001100; -- 				blt $3 $1 end_bottom_paddleL_intersect		# paddle_length/4 > (bottom_paddleR - top_ball)

0335 : 01000000010000000000000001111011; -- 				lw $1 123($0)	# ball_old_yvel

0336 : 00101000010000100000000000000011; -- 				addi $1 $1 3 	# ball_new_yvel.

0337 : 01000000100000000000000000000111; -- 				lw $2 7($0) 	# paddle_max_yspeed

0338 : 00110000010001000000000000000001; -- 				blt $1 $2 pL_maximize_ball_yvel # ball_new_yvel > paddle_max_yspeed

0339 : 00001000000000000000000101010111; -- 				j pL_increase_ball_yvel

0340 : 01000000010000000000000000000111; -- 						lw $1 7($0)

0341 : 00111000010000000000000001111011; -- 						sw $1 123($0)

0342 : 00001000000000000000000101011011; -- 						j end_bottom_paddleL_intersect

0343 : 01000000010000000000000001111011; -- 						lw $1 123($0)	# ball y velocity

0344 : 00101000010000100000000000000011; -- 						addi $1 $1 3 	# find new y velocity.

0345 : 00111000010000000000000001111011; -- 						sw $1 123($0) 	# ball y velocity

0346 : 00001000000000000000000101011011; -- 						j end_bottom_paddleL_intersect

0347 : 01000000010000000000000001111101; -- 					lw $1 125($0)	# top_paddleL

0348 : 01000000100000000000000000000110; -- 					lw $2 6($0)	# paddle_length

0349 : 00000000100001000000000100010100; -- 					sra $2 $2 2 	# paddle_length/4

0350 : 01000000110000000000000001111001; -- 					lw $3 121($0)	# top_ball

0351 : 01000001000000000000000000000100; -- 					lw $4 4($0)	# ball_length

0352 : 00000000110001100100000000000000; -- 					add $3 $3 $4	# bottom_ball

0353 : 00000000110001100001000000000100; -- 					sub $3 $3 $1 	# bottom_ball - top_paddleR

0354 : 00110000100001100000000000001110; -- 					blt $2 $3 end_top_paddleL_interesect

0355 : 01000000010000000000000001111011; -- 					lw $1 123($0)	# ball y velocity

0356 : 00101000010000111111111111111101; -- 					addi $1 $1 -3 	# find new y velocity.

0357 : 01000000100000000000000000000111; -- 					lw $2 7($0) 	# paddle_max_yspeed

0358 : 00000000100000000010000000000100; -- 					sub $2 $0 $2	# min_yvel = -1*paddle_max_yspeed

0359 : 00110000100000100000000000000001; -- 					blt $2 $1 minimize_ball_yvel

0360 : 00001000000000000000000101101101; -- 					j reduce_ball_yvel

0361 : 01000000010000000000000000000111; -- 							lw $1 7($0) 	# paddle_max_yspeed

0362 : 00000000010000000001000000000100; -- 							sub $1 $0 $1	# min_yvel = -1*paddle_max_yspeed

0363 : 00111000010000000000000001111011; -- 							sw $1 123($0)

0364 : 00001000000000000000000101110001; -- 							j end_top_paddleL_interesect 

0365 : 01000000010000000000000001111011; -- 							lw $1 123($0)	# ball y velocity

0366 : 00101000010000111111111111111101; -- 							addi $1 $1 -3 	# find new y velocity.

0367 : 00111000010000000000000001111011; -- 							sw $1 123($0) 	# ball y velocity

0368 : 00001000000000000000000101110001; -- 							j end_top_paddleL_interesect

0369 : 01000000110000000000000001111010; -- 			lw $3 122($0)	# $3: Ball x velocity

0370 : 00110000110000011111111011110011; -- 			blt $3 $0 update_bx # If Ball x velocity is positive, keep positive. 

0371 : 00000001000000000011000000000100; -- 			sub $4 $0 $3 	# Negate x velocity

0372 : 00111001000000000000000001111010; -- 			sw $4 122($0)	# Store new x velocity into function. 

0373 : 00001000000000000000000001100110; -- 			j update_bx

0374 : 01000000010000000000000010000001; -- 				lw $1 129($0)	# top_paddleR

0375 : 01000000110000000000000000000110; -- 				lw $3 6($0)	# paddle_length

0376 : 00000000010001100001000000000000; -- 				add $1 $3 $1	# bottom_paddleR

0377 : 01000000100000000000000001111001; -- 				lw $2 121($0)	# top_ball

0378 : 00000000010000100010000000000100; -- 				sub $1 $1 $2	# bottom_paddleR - top_ball

0379 : 00000000110001100000000100010100; -- 				sra $3 $3 2		# paddle_length / 4

0380 : 00110000110000100000000000001100; -- 				blt $3 $1 end_bottom_paddleR_intersect	# paddle_length/4 > bottom_paddleR - top_ball

0381 : 01000000010000000000000001111011; -- 				lw $1 123($0)	# ball_old_yvel

0382 : 00101000010000100000000000000011; -- 				addi $1 $1 3 	# ball_new_yvel.

0383 : 01000000100000000000000000000111; -- 				lw $2 7($0) 	# paddle_max_yspeed

0384 : 00110000010001000000000000000001; -- 				blt $1 $2 pR_maximize_ball_yvel # ball_new_yvel > paddle_max_yspeed

0385 : 00001000000000000000000110000101; -- 				j pR_increase_ball_yvel

0386 : 01000000010000000000000000000111; -- 						lw $1 7($0)

0387 : 00111000010000000000000001111011; -- 						sw $1 123($0)

0388 : 00001000000000000000000110001001; -- 						j end_bottom_paddleR_intersect

0389 : 01000000010000000000000001111011; -- 						lw $1 123($0)	# ball y velocity

0390 : 00101000010000100000000000000011; -- 						addi $1 $1 3 	# find new y velocity.

0391 : 00111000010000000000000001111011; -- 						sw $1 123($0) 	# ball y velocity

0392 : 00001000000000000000000110001001; -- 						j end_bottom_paddleR_intersect

0393 : 01000000010000000000000010000001; -- 				lw $1 129($0)	# top_paddleR

0394 : 01000000100000000000000000000110; -- 				lw $2 6($0)	# paddle_length

0395 : 00000000100001000000000100010100; -- 				sra $2 $2 2 	# paddle_length/4

0396 : 01000000110000000000000001111001; -- 				lw $3 121($0)	# top_ball

0397 : 01000001000000000000000000000100; -- 				lw $4 4($0)	# ball_length

0398 : 00000000110001100100000000000000; -- 				add $3 $3 $4	# bottom_ball

0399 : 00000000110001100001000000000100; -- 				sub $3 $3 $1 	# bottom_ball - top_paddleR

0400 : 00110000100001100000000000001110; -- 				blt $2 $3 end_top_paddleR_interesect

0401 : 01000000010000000000000001111011; -- 					lw $1 123($0)	# ball y velocity

0402 : 00101000010000111111111111111101; -- 					addi $1 $1 -3 	# find new y velocity.

0403 : 01000000100000000000000000000111; -- 					lw $2 7($0) 	# paddle_max_yspeed

0404 : 00000000100000000010000000000100; -- 					sub $2 $0 $2	# min_yvel = -1*paddle_max_yspeed

0405 : 00110000100000100000000000000001; -- 					blt $2 $1 pR_minimize_ball_yvel

0406 : 00001000000000000000000110011011; -- 					j pR_reduce_ball_yvel

0407 : 01000000010000000000000000000111; -- 							lw $1 7($0) 	# paddle_max_yspeed

0408 : 00000000010000000001000000000100; -- 							sub $1 $0 $1	# min_yvel = -1*paddle_max_yspeed

0409 : 00111000010000000000000001111011; -- 							sw $1 123($0)

0410 : 00001000000000000000000110011111; -- 							j end_top_paddleR_interesect 

0411 : 01000000010000000000000001111011; -- 							lw $1 123($0)	# ball y velocity

0412 : 00101000010000111111111111111101; -- 							addi $1 $1 -3 	# find new y velocity.

0413 : 00111000010000000000000001111011; -- 							sw $1 123($0) 	# ball y velocity

0414 : 00001000000000000000000110011111; -- 							j end_top_paddleR_interesect

0415 : 01000000110000000000000001111010; -- 			lw $3 122($0)	# $3: Ball x velocity

0416 : 00110000000001111111111011000101; -- 			blt $0 $3 update_bx # If ball x velocity is negative, keep negative. 

0417 : 00000001000000000011000000000100; -- 			sub $4 $0 $3 	# Negate x velocity

0418 : 00111001000000000000000001111010; -- 			sw $4 122($0)	# Store new x velocity into function. 

0419 : 00001000000000000000000001100110; -- 			j update_bx

0420 : 01000000010000000000000001111011; -- 		lw $1 123($0)	# Ball y velocity

0421 : 00000000010000000001000000000100; -- 		sub $1 $0 $1	# Negate y velocity

0422 : 00111000010000000000000001111011; -- 		sw $1 123($0) 	# Insert new ball velocity into dmem

0423 : 00001000000000000000000001110010; -- 		j update_by

0424 : 01000000010000000000000001111101; -- 		lw $1 125($0) 	# paddleL_ypos

0425 : 01000000100000000000000001111111; -- 		lw $2 127($0) 	# paddleL_yvel

0426 : 00000000010000100010000000000000; -- 		add $1 $1 $2 	# paddle_newpos

0427 : 01000000100000000000000000000110; -- 		lw $2 6($0) 	# paddleL_length

0428 : 00000000110000100010000000000000; -- 		add $3 $1 $2 	# paddleL_bottom

0429 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0430 : 00110000110001000000000000000010; -- 		blt $3 $2 set_paddleL_bottomBound # if (paddleBottom > bottom_wall) {set paddle_b to hug bottom wall}

0431 : 00111000010000000000000001111101; -- 		sw $1 125($0)	# store new ypaddlePosition. 

0432 : 00001000000000000000000010000100; -- 		j end_move_paddleL

0433 : 01000000010000000000000000000110; -- 		lw $1 6($0) 	# paddle_length

0434 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0435 : 00000000100001000001000000000100; -- 		sub $2 $2 $1 	# lowest_paddle_y_pos

0436 : 00111000100000000000000001111101; -- 		sw $2 125($0)	# store new ypaddlePosition. 

0437 : 00001000000000000000000010000100; -- 		j end_move_paddleL

0438 : 01000000010000000000000001111101; -- 		lw $1 125($0) 	# paddleL_ypos

0439 : 01000000100000000000000001111111; -- 		lw $2 127($0) 	# paddleL_yvel

0440 : 00000000010000100010000000000100; -- 		sub $1 $1 $2 	# paddle_newpos

0441 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# top_wall

0442 : 00110000100000100000000000000010; -- 		blt $2 $1 set_paddleL_upperBound # if (topwall > paddle_newpos) {set paddle_t top top wall}

0443 : 00111000010000000000000001111101; -- 		sw $1 125($0)	# store new ypaddlePosition. 

0444 : 00001000000000000000000010000100; -- 		j end_move_paddleL

0445 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# upper_wall

0446 : 00111000100000000000000001111101; -- 		sw $2 125($0)	# store new ypaddlePosition. 

0447 : 00001000000000000000000010000100; -- 		j end_move_paddleL

0448 : 01000000010000000000000010000001; -- 		lw $1 129($0) 	# paddleL_ypos

0449 : 01000000100000000000000010000011; -- 		lw $2 131($0) 	# paddleL_yvel

0450 : 00000000010000100010000000000000; -- 		add $1 $1 $2 	# paddle_newpos

0451 : 01000000100000000000000000000110; -- 		lw $2 6($0) 	# paddleL_length

0452 : 00000000110000100010000000000000; -- 		add $3 $1 $2 	# paddleL_bottom

0453 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0454 : 00110000110001000000000000000010; -- 		blt $3 $2 set_paddleR_bottomBound # if (paddleBottom > bottom_wall) {set paddle_b to hug bottom wall}

0455 : 00111000010000000000000010000001; -- 		sw $1 129($0)	# store new ypaddlePosition. 

0456 : 00001000000000000000000010010010; -- 		j end_move_paddleR

0457 : 01000000010000000000000000000110; -- 		lw $1 6($0) 	# paddle_length

0458 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0459 : 00000000100001000001000000000100; -- 		sub $2 $2 $1 	# lowest_paddle_y_pos

0460 : 00111000100000000000000010000001; -- 		sw $2 129($0)	# store new ypaddlePosition. 

0461 : 00001000000000000000000010010010; -- 		j end_move_paddleR

0462 : 01000000010000000000000010000001; -- 		lw $1 129($0) 	# paddleL_ypos

0463 : 01000000100000000000000010000011; -- 		lw $2 131($0) 	# paddleL_yvel

0464 : 00000000010000100010000000000100; -- 		sub $1 $1 $2 	# paddle_newpos

0465 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# top_wall

0466 : 00110000100000100000000000000010; -- 		blt $2 $1 set_paddleR_upperBound # if (topwall > paddle_newpos) {set paddle_t top top wall}

0467 : 00111000010000000000000010000001; -- 		sw $1 129($0)	# store new ypaddlePosition. 

0468 : 00001000000000000000000010010010; -- 		j end_move_paddleR

0469 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# upper_wall

0470 : 00111000100000000000000010000001; -- 		sw $2 129($0)	# store new ypaddlePosition. 

0471 : 00001000000000000000000010010010; -- 		j end_move_paddleR

[0472..4095] : 00000000000000000000000000000000;
END;
