DEPTH = 4096;
WIDTH = 32;
ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;
CONTENT
BEGIN
0000 : 01000000010000000000000000010100; -- 	lw $1 20($0)		# b_xpos [31:21]

0001 : 00111000010000000000000001111000; -- 	sw $1 120($0)

0002 : 01000000010000000000000000010101; -- 	lw $1 21($0)		# b_ypos [20:10]

0003 : 00111000010000000000000001111001; -- 	sw $1 121($0)

0004 : 01000000010000000000000000010110; -- 	lw $1 22($0) 		# b_xvel [9:5]

0005 : 00111000010000000000000001111010; -- 	sw $1 122($0)

0006 : 01000000010000000000000000010111; -- 	lw $1 23($0)		# b_yvel [4:0]

0007 : 00111000010000000000000001111011; -- 	sw $1 123($0)

0008 : 01000000010000000000000000011000; -- 	lw $1 24($0)		# pL_xpos [31:21]

0009 : 00111000010000000000000001111100; -- 	sw $1 124($0)

0010 : 01000000010000000000000000011001; -- 	lw $1 25($0)		# pL_ypos [20:10]

0011 : 00111000010000000000000001111101; -- 	sw $1 125($0)

0012 : 01000000010000000000000000011010; -- 	lw $1 26($0) 		# pR_xvel [9:5]

0013 : 00111000010000000000000001111110; -- 	sw $1 126($0)

0014 : 01000000010000000000000000011011; -- 	lw $1 27($0)		# pR_yvel [4:0]

0015 : 00111000010000000000000001111111; -- 	sw $1 127($0)

0016 : 01000000010000000000000000011100; -- 	lw $1 28($0)		# pL_xpos [31:21]

0017 : 00111000010000000000000010000000; -- 	sw $1 128($0)

0018 : 01000000010000000000000000011101; -- 	lw $1 29($0)		# pL_ypos [20:10]

0019 : 00111000010000000000000010000001; -- 	sw $1 129($0)

0020 : 01000000010000000000000000011110; -- 	lw $1 30($0) 		# pR_xvel [9:5]

0021 : 00111000010000000000000010000010; -- 	sw $1 130($0)

0022 : 01000000010000000000000000011111; -- 	lw $1 31($0)		# pR_yvel [4:0]

0023 : 00111000010000000000000010000011; -- 	sw $1 131($0)

0024 : 00111000000000000000000010000100; -- 	sw $0 132($0)

0025 : 00111000000000000000000010000101; -- 	sw $0 133($0)

0026 : 01000000010000000000000000101010; -- 	lw $1 42($0) 		# p1_powerup_score

0027 : 00111000010000000000000010001110; -- 	sw $1 142($0) 		

0028 : 01000000010000000000000000101011; -- 	lw $1 43($0) 		# p2_powerup_score

0029 : 00111000010000000000000010001111; -- 	sw $1 143($0) 		

0030 : 01000000010000000000000000101100; -- 	lw $1 44($0) 		# pl_lives

0031 : 00111000010000000000000010010000; -- 	sw $1 144($0)

0032 : 01000000010000000000000000101101; -- 	lw $1 45($0) 		# p2_lives

0033 : 00111000010000000000000010010001; -- 	sw $1 145($0) 

0034 : 01000000010000000000000000101110; -- 	lw $1 46($0) 		# gravity_time_left

0035 : 00111000010000000000000010010010; -- 	sw $1 146($0)

0036 : 01000000010000000000000000101111; -- 	lw $1 47($0) 		# gravity_affecting_who

0037 : 00111000010000000000000010010011; -- 	sw $1 147($0)

0038 : 01000000010000000000000000110010; -- 	lw $1 50($0) 		# gametime

0039 : 00111000010000000000000010010110; -- 	sw $1 150($0)

0040 : 01000000010000000000000000110011; -- 	lw $1 51($0) 		# note pointer

0041 : 00111000010000000000000010010111; -- 	sw $1 151($0)

0042 : 01000000010000000000000000110100; -- 	lw $1 52($0) 		# note speed

0043 : 00111000010000000000000010011000; -- 	sw $1 152($0)

0044 : 00111000000000000000000010100000; -- 	sw $0 160($0)	

0045 : 00111000000000000000000010100001; -- 	sw $0 161($0)

0046 : 00111000000000000000000010100010; -- 	sw $0 162($0)

0047 : 00111000000000000000000010100011; -- 	sw $0 163($0)

0048 : 00111000000000000000000010100100; -- 	sw $0 164($0)

0049 : 00111000000000000000000010100101; -- 	sw $0 165($0)

0050 : 00111000000000000000000010100110; -- 	sw $0 166($0)

0051 : 00111000000000000000000010100111; -- 	sw $0 167($0)

0052 : 00111000000000000000000010101010; -- 	sw $0 170($0)	

0053 : 00111000000000000000000010101011; -- 	sw $0 171($0)

0054 : 00111000000000000000000010101100; -- 	sw $0 172($0)

0055 : 00111000000000000000000010101101; -- 	sw $0 173($0)

0056 : 00111000000000000000000010101110; -- 	sw $0 174($0)

0057 : 00111000000000000000000010101111; -- 	sw $0 175($0)

0058 : 00111000000000000000000010110000; -- 	sw $0 176($0)

0059 : 00111000000000000000000010110001; -- 	sw $0 177($0)

0060 : 00111000000000000000000010110100; -- 	sw $0 180($0)	

0061 : 00111000000000000000000010110101; -- 	sw $0 181($0)

0062 : 00111000000000000000000010110110; -- 	sw $0 182($0)

0063 : 00111000000000000000000010110111; -- 	sw $0 183($0)

0064 : 00111000000000000000000010111000; -- 	sw $0 184($0)

0065 : 00111000000000000000000010111001; -- 	sw $0 185($0)

0066 : 00111000000000000000000010111010; -- 	sw $0 186($0)

0067 : 00111000000000000000000010111011; -- 	sw $0 187($0)

0068 : 00111000000000000000000010010101; -- 	sw $0 149($0)

0069 : 00011000000000000000000100111110; -- 	jal push_to_reg10

0070 : 00011000000000000000000101000100; -- 	jal push_to_reg11

0071 : 00011000000000000000000101001010; -- 	jal push_to_reg12

0072 : 00011000000000000000000101010000; -- 	jal push_to_reg13

0073 : 00011000000000000000000110101110; -- 	jal push_to_reg14

0074 : 00011000000000000000000101101101; -- 	jal push_to_reg20

0075 : 00011000000000000000000101110011; -- 	jal push_to_reg21

0076 : 00011000000000000000000101111001; -- 	jal push_to_reg22

0077 : 00001000000000000000001011101101; -- 		j increment_pseudorandom_counter1

0078 : 00011000000000000000000110111110; -- 		jal store_inputs_into_dmem

0079 : 01000000100000000000000010001100; -- 		lw $2 140($0) # p1 guitar inputs

0080 : 00101000110000000000000000000001; -- 		addi $3 $0 1 

0081 : 00010000100001100000000000000001; -- 		bne $2 $3 not_single_player

0082 : 00001000000000000000000001011000; -- 			j start_single_player_screen	# If red pressed 

0083 : 01000000100000000000000010001100; -- 		lw $2 140($0) # p1 guitar inputs

0084 : 00101000110000000000000000000010; -- 		addi $3 $0 2

0085 : 00010000100001100000000000000001; -- 		bne $2 $3 not_multi_player # If green or yellow pressed

0086 : 00001000000000000000000001011101; -- 			j start_multi_player_screen 

0087 : 00001000000000000000000001001101; -- 	j start_splash_screen_loop # If guitar didn't press anything, stay in splash screen.

0088 : 00101000010000000000000000000001; -- 	addi $1 $0 1

0089 : 00111000010000000000000010010101; -- 	sw $1 149($0) # store game state 1 into dmem

0090 : 00011000000000000000000101010000; -- 	jal push_to_reg13

0091 : 00011000000000000000000110101110; -- 	jal push_to_reg14

0092 : 00001000000000000000000001101101; -- j start_game

0093 : 00101000010000000000000000000010; -- 	addi $1 $0 2

0094 : 00111000010000000000000010010101; -- 	sw $1 149($0) # store game state 1 into dmem

0095 : 00011000000000000000000101010000; -- 	jal push_to_reg13

0096 : 00011000000000000000000110101110; -- 	jal push_to_reg14

0097 : 00001000000000000000000001101101; -- j start_game

0098 : 00101000010000000000000000000011; -- 	addi $1 $0 3

0099 : 00111000010000000000000010010101; -- 	sw $1 149($0) # store game state 1 into dmem

0100 : 00011000000000000000000101010000; -- 	jal push_to_reg13

0101 : 00011000000000000000000110101110; -- 	jal push_to_reg14

0102 : 00001000000000000000001011110011; -- 	j increment_pseudorandom_counter2

0103 : 00011000000000000000000110111110; -- 	jal store_inputs_into_dmem

0104 : 01000000100000000000000010001100; -- 	lw $2 140($0)

0105 : 00101000010000000000000000000100; -- 	addi $1 $0 4

0106 : 00010000100000111111111111110111; -- 	bne $2 $1 start_game_over_screen

0107 : 00001000000000000000000000000000; -- 	j start_splash_screen	# if a button is pressed, then exit to splash screen

0108 : 00001000000000000000000001100010; -- j start_game_over_screen

0109 : 01000000010000000000000000010100; -- 	lw $1 20($0)		# b_xpos [31:21]

0110 : 00111000010000000000000001111000; -- 	sw $1 120($0)

0111 : 01000000010000000000000000010101; -- 	lw $1 21($0)		# b_ypos [20:10]

0112 : 00111000010000000000000001111001; -- 	sw $1 121($0)

0113 : 01000000010000000000000000010110; -- 	lw $1 22($0) 		# b_xvel [9:5]

0114 : 00111000010000000000000001111010; -- 	sw $1 122($0)

0115 : 01000000010000000000000000010111; -- 	lw $1 23($0)		# b_yvel [4:0]

0116 : 00111000010000000000000001111011; -- 	sw $1 123($0)

0117 : 01000000010000000000000000011000; -- 	lw $1 24($0)		# pL_xpos [31:21]

0118 : 00111000010000000000000001111100; -- 	sw $1 124($0)

0119 : 01000000010000000000000000011001; -- 	lw $1 25($0)		# pL_ypos [20:10]

0120 : 00111000010000000000000001111101; -- 	sw $1 125($0)

0121 : 01000000010000000000000000011010; -- 	lw $1 26($0) 		# pR_xvel [9:5]

0122 : 00111000010000000000000001111110; -- 	sw $1 126($0)

0123 : 01000000010000000000000000011011; -- 	lw $1 27($0)		# pR_yvel [4:0]

0124 : 00111000010000000000000001111111; -- 	sw $1 127($0)

0125 : 01000000010000000000000000011100; -- 	lw $1 28($0)		# pL_xpos [31:21]

0126 : 00111000010000000000000010000000; -- 	sw $1 128($0)

0127 : 01000000010000000000000000011101; -- 	lw $1 29($0)		# pL_ypos [20:10]

0128 : 00111000010000000000000010000001; -- 	sw $1 129($0)

0129 : 01000000010000000000000000011110; -- 	lw $1 30($0) 		# pR_xvel [9:5]

0130 : 00111000010000000000000010000010; -- 	sw $1 130($0)

0131 : 01000000010000000000000000011111; -- 	lw $1 31($0)		# pR_yvel [4:0]

0132 : 00111000010000000000000010000011; -- 	sw $1 131($0)

0133 : 00111000000000000000000010000100; -- 	sw $0 132($0)

0134 : 00111000000000000000000010000101; -- 	sw $0 133($0)

0135 : 01000000010000000000000000101010; -- 	lw $1 42($0) 		# p1_powerup_score

0136 : 00111000010000000000000010001110; -- 	sw $1 142($0) 		

0137 : 01000000010000000000000000101011; -- 	lw $1 43($0) 		# p2_powerup_score

0138 : 00111000010000000000000010001111; -- 	sw $1 143($0) 		

0139 : 01000000010000000000000000101100; -- 	lw $1 44($0) 		# pl_lives

0140 : 00111000010000000000000010010000; -- 	sw $1 144($0)

0141 : 01000000010000000000000000101101; -- 	lw $1 45($0) 		# p2_lives

0142 : 00111000010000000000000010010001; -- 	sw $1 145($0) 

0143 : 01000000010000000000000000101110; -- 	lw $1 46($0) 		# gravity_time_left

0144 : 00111000010000000000000010010010; -- 	sw $1 146($0)

0145 : 01000000010000000000000000101111; -- 	lw $1 47($0) 		# gravity_affecting_who

0146 : 00111000010000000000000010010011; -- 	sw $1 147($0)

0147 : 01000000010000000000000000110010; -- 	lw $1 50($0) 		# gametime

0148 : 00111000010000000000000010010110; -- 	sw $1 150($0)

0149 : 01000000010000000000000000110011; -- 	lw $1 51($0) 		# note pointer

0150 : 00111000010000000000000010010111; -- 	sw $1 151($0)

0151 : 01000000010000000000000000110100; -- 	lw $1 52($0) 		# note speed

0152 : 00111000010000000000000010011000; -- 	sw $1 152($0)

0153 : 00111000000000000000000010100000; -- 	sw $0 160($0)	

0154 : 00111000000000000000000010100001; -- 	sw $0 161($0)

0155 : 00111000000000000000000010100010; -- 	sw $0 162($0)

0156 : 00111000000000000000000010100011; -- 	sw $0 163($0)

0157 : 00111000000000000000000010100100; -- 	sw $0 164($0)

0158 : 00111000000000000000000010100101; -- 	sw $0 165($0)

0159 : 00111000000000000000000010100110; -- 	sw $0 166($0)

0160 : 00111000000000000000000010100111; -- 	sw $0 167($0)

0161 : 00111000000000000000000010101010; -- 	sw $0 170($0)	

0162 : 00111000000000000000000010101011; -- 	sw $0 171($0)

0163 : 00111000000000000000000010101100; -- 	sw $0 172($0)

0164 : 00111000000000000000000010101101; -- 	sw $0 173($0)

0165 : 00111000000000000000000010101110; -- 	sw $0 174($0)

0166 : 00111000000000000000000010101111; -- 	sw $0 175($0)

0167 : 00111000000000000000000010110000; -- 	sw $0 176($0)

0168 : 00111000000000000000000010110001; -- 	sw $0 177($0)

0169 : 00111000000000000000000010110100; -- 	sw $0 180($0)	

0170 : 00111000000000000000000010110101; -- 	sw $0 181($0)

0171 : 00111000000000000000000010110110; -- 	sw $0 182($0)

0172 : 00111000000000000000000010110111; -- 	sw $0 183($0)

0173 : 00111000000000000000000010111000; -- 	sw $0 184($0)

0174 : 00111000000000000000000010111001; -- 	sw $0 185($0)

0175 : 00111000000000000000000010111010; -- 	sw $0 186($0)

0176 : 00111000000000000000000010111011; -- 	sw $0 187($0)

0177 : 00000001110000000000000000000000; -- 		add $7 $0 $0

0178 : 01000000100000000000000000001000; -- 		lw $2 8($0)						

0179 : 00001000000000000000001011111001; -- 			j increment_pseudorandom_counter3

0180 : 00101001110011100000000000000001; -- 			addi $7 $7 1

0181 : 00010001110001011111111111111101; -- 			bne $7 $2 counterincrement

0182 : 00001000000000000000000100110101; -- 	j update_vga_registers

0183 : 00011000000000000000000110111110; -- 	jal store_inputs_into_dmem

0184 : 01000000010000000000000010010110; -- 		lw $1 150($0)

0185 : 00101000010000100000000000000001; -- 		addi $1 $1 1

0186 : 00111000010000000000000010010110; -- 		sw $1 150($0)

0187 : 00101011110000000000000010100000; -- 		    addi $15 $0 160      # move note data to temp func reg

0188 : 00011000000000000000000111000111; -- 		    jal check_note # update note 1

0189 : 00101011110000000000000010100100; -- 		    addi $15 $0 164 

0190 : 00011000000000000000000111000111; -- 		    jal check_note  # update note 2

0191 : 00101011110000000000000010101010; -- 		    addi $15 $0 170     # move note data to temp func reg

0192 : 00011000000000000000000111000111; -- 		    jal check_note # update note 3

0193 : 00101011110000000000000010101110; -- 		    addi $15 $0 174 

0194 : 00011000000000000000000111000111; -- 		    jal check_note  # update note 4

0195 : 00101011110000000000000010110100; -- 		    addi $15 $0 180     # move note data to temp func reg

0196 : 00011000000000000000000111000111; -- 		    jal check_note # update note 5

0197 : 00101011110000000000000010111000; -- 		    addi $15 $0 184 

0198 : 00011000000000000000000111000111; -- 		    jal check_note  # update note 6

0199 : 01000000010000000000000000001011; -- 					lw $1 11($0) 				# left_wall

0200 : 01000000100000000000000001111000; -- 					lw $2 120($0)				# ballxpos																

0201 : 00110000010001000000000101110000; -- 					blt $1 $2 hit_left_wall 	# ballxpos < left_wall

0202 : 01000000010000000000000000001100; -- 					lw $1 12($0)				# right_wall

0203 : 01000000100000000000000000000100; -- 					lw $2 4($0) 				# ball_length

0204 : 01000000110000000000000001111000; -- 					lw $3 120($0) 				# ballxpos

0205 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# ballxpos + ball_length = ball_right_boundry

0206 : 00110000110000100000000101110000; -- 					blt $3 $1 hit_right_wall	# ball_right_boundry < right_wall { hit right wall }

0207 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0208 : 01000000100000000000000001111101; -- 					lw $2 125($0)				# t_paddleL

0209 : 01000000110000000000000000000110; -- 					lw $3 6($0)					# paddle_length

0210 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# t_paddleL + paddle_length = b_paddleL

0211 : 00110000010001100000000000010000; -- 					blt $1 $3 end_lp_coll_check # if (top_ball > b_paddleL) { no left paddle collision }

0212 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0213 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# b_length

0214 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# b_ball = t_ball + b_length

0215 : 01000000100000000000000001111101; -- 					lw $2 125($0) 				# t_paddleL

0216 : 00110000100000100000000000001011; -- 					blt $2 $1 end_lp_coll_check # if (t_paddleL > b_ball) { no left paddle collision }

0217 : 01000000010000000000000001111100; -- 					lw $1 124($0) 				# l_paddleL

0218 : 01000000100000000000000000000101; -- 					lw $2 5($0) 	 			# paddle_width

0219 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# r_paddleL = l_paddleL + paddle_width

0220 : 01000000100000000000000001111000; -- 					lw $2 120($0) 				# l_ball

0221 : 00110000100000100000000000000110; -- 					blt $2 $1 end_lp_coll_check # l_ball > r_paddleL

0222 : 01000000010000000000000001111100; -- 					lw $1 124($0) 				# l_paddleL

0223 : 01000000100000000000000001111000; -- 					lw $2 120($0) 				# l_ball

0224 : 01000000110000000000000000000100; -- 					lw $3 4($0)					# ball_length

0225 : 00000000100001000011000000000000; -- 					add $2 $2 $3				# r_ball

0226 : 00110000010001000000000000000001; -- 					blt $1 $2 end_lp_coll_check # l_paddleL > r_ball

0227 : 00001000000000000000001001010011; -- 					j hit_paddleL

0228 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0229 : 01000000100000000000000010000001; -- 					lw $2 129($0)				# t_paddleR

0230 : 01000000110000000000000000000110; -- 					lw $3 6($0)					# paddle_length

0231 : 00000000110001000011000000000000; -- 					add $3 $2 $3 				# t_paddleR + paddle_length = b_paddleR

0232 : 00110000010001100000000000010000; -- 					blt $1 $3 end_rp_coll_check # if (top_ball > b_paddleR) { no left paddle collision }

0233 : 01000000010000000000000001111001; -- 					lw $1 121($0) 				# t_ball

0234 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# b_length

0235 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# b_ball = t_ball + b_length

0236 : 01000000100000000000000010000001; -- 					lw $2 129($0) 				# t_paddleR

0237 : 00110000100000100000000000001011; -- 					blt $2 $1 end_rp_coll_check # if (t_paddleR > b_ball) { no left paddle collision }

0238 : 01000000010000000000000001111000; -- 					lw $1 120($0) 				# l_ball

0239 : 01000000100000000000000000000100; -- 					lw $2 4($0) 	 			# ball_length

0240 : 00000000010000100010000000000000; -- 					add $1 $1 $2 				# r_ball = l_BALL + ball_length

0241 : 01000000100000000000000010000000; -- 					lw $2 128($0) 				# l_paddleR

0242 : 00110000100000100000000000000110; -- 					blt $2 $1 end_rp_coll_check # l_paddleR > r_BALL

0243 : 01000000010000000000000001111000; -- 					lw $1 120($0) 				# l_ball

0244 : 01000000100000000000000010000000; -- 					lw $2 128($0)				# l_paddleR

0245 : 01000000110000000000000000000101; -- 					lw $3 5($0)					# paddle_width

0246 : 00000000100001000011000000000000; -- 					add $2 $2 $3  				# r_paddleR

0247 : 00110000010001000000000000000001; -- 					blt $1 $2 end_rp_coll_check # l_ball > r_paddleR

0248 : 00001000000000000000001010000001; -- 					j hit_paddleR

0249 : 00001000000000000000000011111010; -- 					j update_bx

0250 : 01000000010000000000000001111000; -- 				lw $1 120($0) 	# $1: Ball x position.

0251 : 01000000110000000000000001111010; -- 				lw $3 122($0)	# $3: Ball x velocity

0252 : 00000001000000100011000000000000; -- 				add $4 $1 $3	# $6: newx = oldx + deltax

0253 : 00111001000000000000000001111000; -- 				sw $4 120($0)	# store newx

0254 : 01000000010000000000000000001001; -- 					lw $1 9($0)					# top_wall_pos

0255 : 01000000100000000000000001111001; -- 					lw $2 121($0) 				# ball_y_pos

0256 : 00110000010001000000000110110111; -- 					blt $1 $2 hit_top_wall		# top_wall_pos > ball_y_pos

0257 : 01000000010000000000000000001010; -- 					lw $1 10($0)				# bottom_wall_pos

0258 : 01000000100000000000000001111001; -- 					lw $2 121($0) 				# ball_y_pos

0259 : 01000000110000000000000000000100; -- 					lw $3 4($0)		 			# ball_length

0260 : 00000000110001100010000000000000; -- 					add $3 $3 $2 				# ball_ypos + ball_length = ball_bottom_boundry

0261 : 00110000110000100000000110101101; -- 					blt $3 $1 hit_bottom_wall 	# if (ball_bottom_boundry > bottom_wall_pos) { hit_bottom_wall }

0262 : 01000000010000000000000001111001; -- 				lw $1 121($0) 					# ball_oldypos

0263 : 01000000100000000000000001111011; -- 				lw $2 123($0)					# ballyvel

0264 : 00000000100001000001000000000000; -- 				add $2 $2 $1					# newy = ball_oldypos + ballyvel

0265 : 00111000100000000000000001111001; -- 				sw $2 121($0) 					# store newy into 121.

0266 : 01000000010000000000000001111000; -- 			lw $1 120($0) 	# ballX 

0267 : 01000000100000000000000000000100; -- 			lw $2 4($0)	# ball_length

0268 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# ball_length/2

0269 : 00000000010000100010000000000000; -- 			add $1 $1 $2 	# center_x of ball

0270 : 01000000100000000000000000001100; -- 			lw $2 12($0)	# wall_width

0271 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# wall_width/2

0272 : 00110000010001000000000000001110; -- 			blt $1 $2 end_move_paddleL		# center_x_ball > wall_width/2

0273 : 01000001000000000000000010000100; -- 			lw $4 132($0) # pL stoptime_left

0274 : 00010001000000000000000000001000; -- 			bne $4 $0 decrement_paddleL_pausetime

0275 : 01000000010000000000000001111101; -- 			lw $1 125($0) # paddleL_ypos

0276 : 01000000100000000000000000000110; -- 			lw $2 6($0) # paddleL_length

0277 : 00000000100001000000000010010100; -- 			sra $2 $2 1	#  paddleL_length/2

0278 : 00000000100001000001000000000000; -- 			add $2 $2 $1 # paddleL_ymid = paddle_length/2 + paddle_ypos

0279 : 01000000110000000000000001111001; -- 			lw $3 121($0) # ball_ypos

0280 : 00110000110001000000000110100100; -- 			blt $3 $2 move_paddleL_down # if ball_ypos > paddleL_ymid

0281 : 00110000100001100000000110110001; -- 			blt $2 $3 move_paddleL_up # if paddleL_ymid > ball_ypos

0282 : 00001000000000000000000100011111; -- 			j end_move_paddleL

0283 : 01000001000000000000000010000100; -- 				lw $4 132($0) # pL stoptime_left

0284 : 00101001000010011111111111111111; -- 				addi $4 $4 -1 # decrement pL stoptime_left

0285 : 00111001000000000000000010000100; -- 				sw $4 132($0) # push back pL stoptime_left

0286 : 00001000000000000000000100011111; -- 			j end_move_paddleL

0287 : 01000000010000000000000001111000; -- 			lw $1 120($0) 	# ballX 

0288 : 01000000100000000000000000000100; -- 			lw $2 4($0)	# ball_length

0289 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# ball_length/2

0290 : 00000000010000100010000000000000; -- 			add $1 $1 $2 	# center_x of ball

0291 : 01000000100000000000000000001100; -- 			lw $2 12($0)	# wall_width

0292 : 00000000100001000000000010010100; -- 			sra $2 $2 1		# wall_width/2

0293 : 00110000100000100000000000001110; -- 			blt $2 $1 end_move_paddleR		# wall_width/2 > center_x_ball

0294 : 01000001000000000000000010000101; -- 			lw $4 133($0) # pL stoptime_left

0295 : 00010001000000000000000000001000; -- 			bne $4 $0 decrement_paddleR_pausetime # if pR stoptime_left > 0, then jump

0296 : 01000000010000000000000010000001; -- 			lw $1 129($0) # paddleR_ypos

0297 : 01000000100000000000000000000110; -- 			lw $2 6($0) # paddleR_length

0298 : 00000000100001000000000010010100; -- 			sra $2 $2 1	#  paddleR_length/2

0299 : 00000000100001000001000000000000; -- 			add $2 $2 $1 # paddleR_ymid = paddle_length/2 + paddle_ypos

0300 : 01000000110000000000000001111001; -- 			lw $3 121($0) # ball_ypos

0301 : 00110000110001000000000110100111; -- 			blt $3 $2 move_paddleR_down # if ball_ypos > paddleR_ymid

0302 : 00110000100001100000000110110100; -- 			blt $2 $3 move_paddleR_up # if paddleR_ymid > ball_ypos

0303 : 00001000000000000000000100110100; -- 			j end_move_paddleR

0304 : 01000001000000000000000010000101; -- 				lw $4 133($0) # pR stoptime_left

0305 : 00101001000010011111111111111111; -- 				addi $4 $4 -1 # decrement pR stoptime_left

0306 : 00111001000000000000000010000101; -- 				sw $4 133($0) # push back pR stoptime_left

0307 : 00001000000000000000000100110100; -- 			j end_move_paddleR

0308 : 00001000000000000000000010110001; -- 	j bufferloop

0309 : 00011000000000000000000100111110; -- 		jal push_to_reg10

0310 : 00011000000000000000000101000100; -- 		jal push_to_reg11

0311 : 00011000000000000000000101001010; -- 		jal push_to_reg12

0312 : 00011000000000000000000101010000; -- 		jal push_to_reg13

0313 : 00011000000000000000000110101110; -- 		jal push_to_reg14

0314 : 00011000000000000000000101101101; -- 		jal push_to_reg20

0315 : 00011000000000000000000101110011; -- 		jal push_to_reg21

0316 : 00011000000000000000000101111001; -- 		jal push_to_reg22

0317 : 00001000000000000000000010110111; -- 		j updated_vga_registers

0318 : 00101100000000000000000001111000; -- 			addi $16 $0 120 		# start storing into dmem at address 120. (120, 121, 122, 123)

0319 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0320 : 00011000000000000000000101010110; -- 			jal push_31_20_9_4

0321 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0322 : 00101010100111100000000000000000; -- 			addi $10 $15 0			# $15 output of jal. Has consolidated register info.

0323 : 00100111110000000000000000000000; -- 			jr $31

0324 : 00101100000000000000000001111100; -- 			addi $16 $0 124 		# start storing into dmem at address 120. (120, 121, 122, 123)

0325 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0326 : 00011000000000000000000101010110; -- 			jal push_31_20_9_4

0327 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0328 : 00101010110111100000000000000000; -- 			addi $11 $15 0			# $15 output of jal. Has consolidated register info.

0329 : 00100111110000000000000000000000; -- 			jr $31

0330 : 00101100000000000000000010000000; -- 			addi $16 $0 128 		# start storing into dmem at address 120. (120, 121, 122, 123)

0331 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0332 : 00011000000000000000000101010110; -- 			jal push_31_20_9_4

0333 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0334 : 00101011000111100000000000000000; -- 			addi $12 $15 0			# $15 output of jal. Has consolidated register info.

0335 : 00100111110000000000000000000000; -- 			jr $31

0336 : 00101100000000000000000010001110; -- 			addi $16 $0 142 		# start storing into dmem at address 142.

0337 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0338 : 00011000000000000000000101010110; -- 			jal push_31_20_9_4

0339 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0340 : 00101011010111100000000000000000; -- 			addi $13 $15 0

0341 : 00100111110000000000000000000000; -- 			jr $31

0342 : 00000011110000000000000000000000; -- 			add $15 $0 $0

0343 : 01000100011000000000000000000000; -- 			lw $17 0($16)			# [31:21]

0344 : 00000100011000100000101010010000; -- 			sll $17 $17 21

0345 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0346 : 01000100011000000000000000000001; -- 			lw $17 1($16)			# [20:10]

0347 : 00101100100000000000011111111111; -- 			addi $18 $0 2047

0348 : 00000100101001000000010100010000; -- 			sll $18 $18 10

0349 : 00000100011000100000010100010000; -- 			sll $17 $17 10

0350 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0351 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0352 : 01000100011000000000000000000010; -- 			lw $17 2($16) 			# [9:5]

0353 : 00101100100000000000000000011111; -- 			addi $18 $0 31

0354 : 00000100101001000000001010010000; -- 			sll $18 $18 5

0355 : 00000100011000100000001010010000; -- 			sll $17 $17 5

0356 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0357 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0358 : 01000100011000000000000000000011; -- 			lw $17 3($16)			# [4:0]

0359 : 00101100100000000000000000011111; -- 			addi $18 $0 31

0360 : 00000100101001000000000000010000; -- 			sll $18 $18 0

0361 : 00000100011000100000000000010000; -- 			sll $17 $17 0

0362 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0363 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0364 : 00100111110000000000000000000000; -- 			jr $31

0365 : 00101100000000000000000010100000; -- 			addi $16 $0 160	 		# start storing into dmem at address 160. (160, 161, 162, 163, 164, 165, 166, 167)

0366 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0367 : 00011000000000000000000101111111; -- 			jal push_31_20_17_16_15_4_1_0

0368 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0369 : 00101101000111100000000000000000; -- 			addi $20 $15 0			# $15 output of jal. Has consolidated register info.

0370 : 00100111110000000000000000000000; -- 			jr $31

0371 : 00101100000000000000000010101010; -- 			addi $16 $0 170	 		# start storing into dmem at address 170. (170, 171, 172, 173, 174, 175, 176, 177)

0372 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0373 : 00011000000000000000000101111111; -- 			jal push_31_20_17_16_15_4_1_0

0374 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0375 : 00101101010111100000000000000000; -- 			addi $21 $15 0			# $15 output of jal. Has consolidated register info.

0376 : 00100111110000000000000000000000; -- 			jr $31

0377 : 00101100000000000000000010110100; -- 			addi $16 $0 180	 		# start storing into dmem at address 170. (180, 181, 182, 183, 184, 185, 186, 187)

0378 : 00000111001111100000000000000000; -- 			add $28 $31 $0

0379 : 00011000000000000000000101111111; -- 			jal push_31_20_17_16_15_4_1_0

0380 : 00000111111110000000000000000000; -- 			add $31 $28 $0

0381 : 00101101100111100000000000000000; -- 			addi $22 $15 0			# $15 output of jal. Has consolidated register info.

0382 : 00100111110000000000000000000000; -- 			jr $31

0383 : 00000011110000000000000000000000; -- 			add $15 $0 $0

0384 : 01000100011000000000000000000000; -- 			lw $17 0($16)		

0385 : 00000100011000100000101010010000; -- 			sll $17 $17 21

0386 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0387 : 01000100011000000000000000000001; -- 			lw $17 1($16)			

0388 : 00101100100000000000000000000111; -- 			addi $18 $0 7

0389 : 00000100101001000000100100010000; -- 			sll $18 $18 18

0390 : 00000100011000100000100100010000; -- 			sll $17 $17 18

0391 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0392 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0393 : 01000100011000000000000000000010; -- 			lw $17 2($16) 			

0394 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0395 : 00000100101001000000100010010000; -- 			sll $18 $18 17

0396 : 00000100011000100000100010010000; -- 			sll $17 $17 17

0397 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0398 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0399 : 01000100011000000000000000000011; -- 			lw $17 3($16) 			

0400 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0401 : 00000100101001000000100000010000; -- 			sll $18 $18 16

0402 : 00000100011000100000100000010000; -- 			sll $17 $17 16

0403 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0404 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0405 : 01000100011000000000000000000100; -- 			lw $17 4($16) 			

0406 : 00101100100000000000011111111111; -- 			addi $18 $0 2047

0407 : 00000100101001000000001010010000; -- 			sll $18 $18 5

0408 : 00000100011000100000001010010000; -- 			sll $17 $17 5

0409 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0410 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0411 : 01000100011000000000000000000101; -- 			lw $17 5($16) 			

0412 : 00101100100000000000000000000111; -- 			addi $18 $0 7

0413 : 00000100101001000000000100010000; -- 			sll $18 $18 2

0414 : 00000100011000100000000100010000; -- 			sll $17 $17 2

0415 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0416 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0417 : 01000100011000000000000000000110; -- 			lw $17 6($16) 			

0418 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0419 : 00000100101001000000000010010000; -- 			sll $18 $18 1

0420 : 00000100011000100000000010010000; -- 			sll $17 $17 1

0421 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0422 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0423 : 01000100011000000000000000000111; -- 			lw $17 7($16) 			

0424 : 00101100100000000000000000000001; -- 			addi $18 $0 1

0425 : 00000100101001000000000000010000; -- 			sll $18 $18 0

0426 : 00000100011000100000000000010000; -- 			sll $17 $17 0

0427 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0428 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0429 : 00100111110000000000000000000000; -- 			jr $31

0430 : 00101011110000000000000000000000; -- 			addi $15 $0 0

0431 : 01000100000000000000000010010110; -- 			lw $16 150($0)			# [31:14] Gametime

0432 : 00000100001000000000011100010000; -- 			sll $16 $16 14

0433 : 00000011110111110000000000000000; -- 			add $15 $15 $16

0434 : 01000100010000000000000010010010; -- 			lw $17 146($0) 			# [13:2] Gravity time remaining.

0435 : 00101100100000000000111111111111; -- 			addi $18 $0 4095

0436 : 00000100101001000000000100010000; -- 			sll $18 $18 2

0437 : 00000100011000100000000100010000; -- 			sll $17 $17 2

0438 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0439 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0440 : 01000100010000000000000010010101; -- 			lw $17 149($0)			# [1:0] Game states

0441 : 00101100100000000000000000000011; -- 			addi $18 $0 3

0442 : 00000100011000110010000000001000; -- 			and $17 $17 $18

0443 : 00000011110111110001000000000000; -- 			add $15 $15 $17

0444 : 00000011100111100000000000000000; -- 			add $14 $15 $0

0445 : 00100111110000000000000000000000; -- 			jr $31 

0446 : 00101000010000000000000000000111; -- 			addi $1 $0 7 	# mask at ...000111

0447 : 00000000010000111101000000001000; -- 			and $1 $1 $29 	

0448 : 00000000010000100000000000010100; -- 			sra $1 $1 0

0449 : 00111000010000000000000010001100; -- 			sw $1 140($0)

0450 : 00101000010000000000000000000111; -- 			addi $1 $0 7   	# mask at ...000111

0451 : 00000000101110100000000110010100; -- 			sra $2 $29 3	# shift $29[5:3] -> $29[2:0]

0452 : 00000000010000100010000000001000; -- 			and $1 $1 $2

0453 : 00111000010000000000000010001101; -- 			sw $1 141($0)

0454 : 00100111110000000000000000000000; -- 	jr $31

0455 : 01000100000111100000000000000001; -- 	    lw $16 1($15)

0456 : 00010100000000000000000000000001; -- 	    bne $16 $0 note_notempty    # jump if note exists

0457 : 00001000000000000000000111010001; -- 	    j note_empty                # else jump to make a note

0458 : 01000100000000000000000010011000; -- 			    lw $16 152($0)   # load note velocity into $16

0459 : 01000100010111100000000000000000; -- 			    lw $17 0($15)

0460 : 00000100011000110000000000000000; -- 			    add $17 $17 $16 # add velocity to high bit note pos

0461 : 00111100010111100000000000000000; -- 			    sw $17 0($15)

0462 : 00001000000000000000000111011100; -- 				j hit_note

0463 : 00001000000000000000001000101000; -- 			 	j is_note_out_of_bounds # Preserve $15! send note dmem location in $15 

0464 : 00100111110000000000000000000000; -- 		    	jr $31          # note's position has been updated, return to game loop

0465 : 01000100000000000000000010010111; -- 			    lw $16 151($0)       # load note pointer into $16

0466 : 01000100011000000000000000000001; -- 			    lw $17 1($16)       # load the time of the next note into $17

0467 : 01000100100000000000000010010110; -- 			    lw $18 150($0)       # load the game loop counter into $18

0468 : 00110100101000100000000000000001; -- 			    blt $18 $17 make_note # if counter is greater than next note time, make note

0469 : 00100111110000000000000000000000; -- 				jr $31              # else, keep note empty, return to game loop

0470 : 01000100000000000000000010010111; -- 					    lw $16 151($0)       # load note pointer into $16

0471 : 01000100011000000000000000000000; -- 					    lw $17 0($16)       # load the value of the next note into $17

0472 : 00111100010111100000000000000001; -- 					    sw $17 1($15)

0473 : 00101100001000000000000000000010; -- 					    addi $16 $16 2       # increment note pointer to next note

0474 : 00111100000000000000000010010111; -- 					    sw $16 151($0)       # store new note pointer into DMEM

0475 : 00100111110000000000000000000000; -- 						jr $31

0476 : 01000000010111100000000000000000; -- 		lw $1 0($15)	# n1_xpos 

0477 : 00101000110000000000000011111111; -- 		addi $3 $0 255 

0478 : 00110000110000100000000001001000; -- 		blt $3 $1 note_outside_hit_range

0479 : 00101000110000000000000100011101; -- 		addi $3 $0 285

0480 : 00110000010001100000000001000110; -- 		blt $1 $3 note_outside_hit_range

0481 : 00001000000000000000001100110101; -- 					j increment_pseudorandom_counter7

0482 : 01000000010111100000000000000001; -- 					lw $1 1($15) # n1_color

0483 : 01000000100000000000000010001100; -- 					lw $2 140($0) # p1_input

0484 : 00000000010000100010000000001000; -- 					and $1 $1 $2 # input color matches note

0485 : 00010000010000000000000000000001; -- 					bne $1 $0 set_n1_p1_hit_true

0486 : 00001000000000000000001000000010; -- 					j end_p1_hit_logic

0487 : 01000000100111100000000000000010; -- 						lw $2 2($15)

0488 : 00010000100000000000000000011001; -- 						bne $2 $0 end_p1_hit_logic

0489 : 00101000010000000000000000000001; -- 							addi $1 $0 1 

0490 : 00111000010111100000000000000010; -- 							sw $1 2($15)

0491 : 01000001100111100000000000000000; -- 								lw $6 0($15)	# n1_xpos 

0492 : 00001000000000000000001100100101; -- 									j increment_pseudorandom_counter6

0493 : 00101000110000000000000100001001; -- 									addi $3 $0 265 

0494 : 00110000110011000000000000000110; -- 									blt $3 $6 is_pL_in_2_point_range

0495 : 00101000110000000000000100010011; -- 									addi $3 $0 275

0496 : 00110001100001100000000000000100; -- 									blt $6 $3 is_pL_in_2_point_range

0497 : 01000001000000000000000010001110; -- 									lw $4 142($0)		# load p1_powerup_score

0498 : 00101001000010000000000000000011; -- 									addi $4 $4 3		# add 3 to powerup p1_powerup_score

0499 : 00111001000000000000000010001110; -- 									sw $4 142($0)

0500 : 00001000000000000000001000000010; -- 									j calculated_points_pL

0501 : 00101000110000000000000100000100; -- 									addi $3 $0 260 

0502 : 00110000110011000000000000000111; -- 									blt $3 $6 is_pL_in_1_point_range

0503 : 00101000110000000000000100011000; -- 									addi $3 $0 280

0504 : 00110001100001100000000000000101; -- 									blt $6 $3 is_pL_in_1_point_range

0505 : 01000001000000000000000010001110; -- 									lw $4 142($0)		# load p1_powerup_score

0506 : 00101001000010000000000000000010; -- 									addi $4 $4 2		# add 2 to powerup p1_powerup_score

0507 : 00111001000000000000000010001110; -- 									sw $4 142($0)

0508 : 00001000000000000000001100010101; -- 									j increment_pseudorandom_counter5

0509 : 00001000000000000000001000000010; -- 									j calculated_points_pL

0510 : 01000001000000000000000010001110; -- 									lw $4 142($0)		# load p1_powerup_score

0511 : 00101001000010000000000000000001; -- 									addi $4 $4 1		# add 1 to powerup p1_powerup_score

0512 : 00111001000000000000000010001110; -- 									sw $4 142($0)

0513 : 00001000000000000000001100000101; -- 									j increment_pseudorandom_counter4

0514 : 01000000010000000000000010010101; -- 					lw $1 149($0) # if 1 player mode

0515 : 00101000100000000000000000000001; -- 					addi $2 $0 1 # 1 player mode gamestate number

0516 : 00010000010001000000000000000101; -- 					bne $1 $2 player2_hit_ball_logic

0517 : 01000000010000000000000010010100; -- 						lw $1 148($0)	# load pseudorandom number

0518 : 00101000100000000000000000000111; -- 						addi $2 $0 7	# 3 bit mask

0519 : 00000000010000100010000000001000; -- 						and $1 $1 $2 	# isolate bits.

0520 : 00010000010000000000000000011110; -- 						bne $1 $0 end_p2_hit_logic # approx once every 8 gameloops steps, hit the note.

0521 : 00001000000000000000001000001111; -- 						j set_n1_p2_hit_true

0522 : 01000000010111100000000000000001; -- 						lw $1 1($15) # n1 color

0523 : 01000000100000000000000010001101; -- 						lw $2 141($0) # p2_input

0524 : 00000000010000100010000000001000; -- 						and $1 $1 $2 # check for overlap

0525 : 00010000010000000000000000000001; -- 						bne $1 $0 set_n1_p2_hit_true 

0526 : 00001000000000000000001000100111; -- 						j end_p2_hit_logic

0527 : 01000000100111100000000000000011; -- 						lw $2 3($15) # load p2hit_status

0528 : 00010000100000000000000000010110; -- 						bne $2 $0 end_p2_hit_logic # if p2 already hit note, don't hit note again.

0529 : 00101000010000000000000000000001; -- 							addi $1 $0 1

0530 : 00111000010111100000000000000011; -- 							sw $1 3($15)

0531 : 01000001100111100000000000000000; -- 								lw $6 0($15)	# n1_xpos 

0532 : 00101000110000000000000100001001; -- 									addi $3 $0 265 

0533 : 00110000110011000000000000000110; -- 									blt $3 $6 is_pR_in_2_point_range

0534 : 00101000110000000000000100010011; -- 									addi $3 $0 275

0535 : 00110001100001100000000000000100; -- 									blt $6 $3 is_pR_in_2_point_range

0536 : 01000001000000000000000010001111; -- 									lw $4 143($0)		# load p1_powerup_score

0537 : 00101001000010000000000000000011; -- 									addi $4 $4 3		# add 3 to powerup p1_powerup_score

0538 : 00111001000000000000000010001111; -- 									sw $4 143($0)

0539 : 00001000000000000000001000100111; -- 									j calculated_points_pR

0540 : 00101000110000000000000100000100; -- 									addi $3 $0 260 

0541 : 00110000110011000000000000000110; -- 									blt $3 $6 is_pR_in_1_point_range

0542 : 00101000110000000000000100011000; -- 									addi $3 $0 280

0543 : 00110001100001100000000000000100; -- 									blt $6 $3 is_pR_in_1_point_range

0544 : 01000001000000000000000010001111; -- 									lw $4 143($0)		# load p1_powerup_score

0545 : 00101001000010000000000000000010; -- 									addi $4 $4 2		# add 2 to powerup p1_powerup_score

0546 : 00111001000000000000000010001111; -- 									sw $4 143($0)

0547 : 00001000000000000000001000100111; -- 									j calculated_points_pR

0548 : 01000001000000000000000010001111; -- 									lw $4 143($0)		# load p1_powerup_score

0549 : 00101001000010000000000000000001; -- 									addi $4 $4 1		# add 1 to powerup p1_powerup_score

0550 : 00111001000000000000000010001111; -- 									sw $4 143($0)

0551 : 00001000000000000000000111001111; -- 	j end_hit_note

0552 : 01000100000111100000000000000000; -- 		lw $16 0($15) 	# note_x_pos

0553 : 01000100010000000000000000001100; -- 		lw $17 12($0) 	# screen_width

0554 : 00000100011000100000000010010100; -- 		sra $17 $17 1 	# screen_width/2

0555 : 00110100001000100000000000000001; -- 		blt $16 $17 note_is_out_of_bounds

0556 : 00001000000000000000000111010000; -- 			j end_is_note_out_of_bounds

0557 : 01000000010111100000000000000010; -- 				lw $1 2($15)

0558 : 00010000010000000000000000000010; -- 				bne $1 $0 end_p1_missed_note

0559 : 01000000100000000000000000000000; -- 				lw $2 0($0) # load paddle stoptime

0560 : 00111000100000000000000010000100; -- 				sw $2 132($0)

0561 : 01000000010111100000000000000011; -- 				lw $1 3($15)

0562 : 00010000010000000000000000000010; -- 				bne $1 $0 end_p2_missed_note

0563 : 01000000100000000000000000000000; -- 				lw $2 0($0) # load paddle stoptime

0564 : 00111000100000000000000010000101; -- 				sw $2 133($0)

0565 : 00111000000111100000000000000000; -- 				sw $0 0($15)

0566 : 00111000000111100000000000000001; -- 				sw $0 1($15)

0567 : 00111000000111100000000000000010; -- 				sw $0 2($15)

0568 : 00111000000111100000000000000011; -- 				sw $0 3($15)

0569 : 00001000000000000000000111010000; -- 	j end_is_note_out_of_bounds

0570 : 01000000010000000000000010010000; -- 		lw $1 144($0)

0571 : 00101000010000111111111111111111; -- 		addi $1 $1 -1

0572 : 00111000010000000000000010010000; -- 		sw $1 144($0)

0573 : 00010000010000000000000000001010; -- 		bne $1 $0 restart_ball_pos

0574 : 00001000000000000000000001100010; -- 		j start_game_over_screen

0575 : 01000000010000000000000010010001; -- 		lw $1 145($0)

0576 : 00101000010000111111111111111111; -- 		addi $1 $1 -1

0577 : 00111000010000000000000010010001; -- 		sw $1 145($0)

0578 : 00010000010000000000000000000101; -- 		bne $1 $0 restart_ball_pos

0579 : 00001000000000000000000001100010; -- 		j start_game_over_screen

0580 : 01000000110000000000000001111010; -- 		lw $3 122($0)	# $3: Ball x velocity

0581 : 00000001000000000011000000000100; -- 		sub $4 $0 $3 	# Negate x velocity

0582 : 00111001000000000000000001111010; -- 		sw $4 122($0)	# Store new x velocity into function. 

0583 : 00001000000000000000000011111010; -- 		j update_bx

0584 : 01000000010000000000000000010100; -- 		lw $1 20($0)		# b_xpos [31:21]

0585 : 00111000010000000000000001111000; -- 		sw $1 120($0)

0586 : 01000000010000000000000000010101; -- 		lw $1 21($0)		# b_ypos [20:10]

0587 : 00111000010000000000000001111001; -- 		sw $1 121($0)

0588 : 01000000010000000000000000010110; -- 		lw $1 22($0) 		# b_xvel [9:5]

0589 : 00111000010000000000000001111010; -- 		sw $1 122($0)

0590 : 01000000010000000000000000010111; -- 		lw $1 23($0)		# b_yvel [4:0]

0591 : 00111000010000000000000001111011; -- 		sw $1 123($0)

0592 : 00111000000000000000000010000100; -- 		sw $0 132($0)

0593 : 00111000000000000000000010000101; -- 		sw $0 133($0)

0594 : 00001000000000000000000011111010; -- 		j update_bx

0595 : 01000000010000000000000001111101; -- 				lw $1 125($0)	# top_paddleL

0596 : 01000000110000000000000000000110; -- 				lw $3 6($0)	# paddle_length

0597 : 00000000010001100001000000000000; -- 				add $1 $3 $1	# bottom_paddleL

0598 : 01000000100000000000000001111001; -- 				lw $2 121($0)	# top_ball

0599 : 00000000010000100010000000000100; -- 				sub $1 $1 $2	# bottom_paddleR - top_ball

0600 : 00000000110001100000000100010100; -- 				sra $3 $3 2		# paddle_length / 4

0601 : 00110000110000100000000000001100; -- 				blt $3 $1 end_bottom_paddleL_intersect		# paddle_length/4 > (bottom_paddleR - top_ball)

0602 : 01000000010000000000000001111011; -- 				lw $1 123($0)	# ball_old_yvel

0603 : 00101000010000100000000000000011; -- 				addi $1 $1 3 	# ball_new_yvel.

0604 : 01000000100000000000000000000111; -- 				lw $2 7($0) 	# paddle_max_yspeed

0605 : 00110000010001000000000000000001; -- 				blt $1 $2 pL_maximize_ball_yvel # ball_new_yvel > paddle_max_yspeed

0606 : 00001000000000000000001001100010; -- 				j pL_increase_ball_yvel

0607 : 01000000010000000000000000000111; -- 						lw $1 7($0)

0608 : 00111000010000000000000001111011; -- 						sw $1 123($0)

0609 : 00001000000000000000001001100110; -- 						j end_bottom_paddleL_intersect

0610 : 01000000010000000000000001111011; -- 						lw $1 123($0)	# ball y velocity

0611 : 00101000010000100000000000000011; -- 						addi $1 $1 3 	# find new y velocity.

0612 : 00111000010000000000000001111011; -- 						sw $1 123($0) 	# ball y velocity

0613 : 00001000000000000000001001100110; -- 						j end_bottom_paddleL_intersect

0614 : 01000000010000000000000001111101; -- 					lw $1 125($0)	# top_paddleL

0615 : 01000000100000000000000000000110; -- 					lw $2 6($0)	# paddle_length

0616 : 00000000100001000000000100010100; -- 					sra $2 $2 2 	# paddle_length/4

0617 : 01000000110000000000000001111001; -- 					lw $3 121($0)	# top_ball

0618 : 01000001000000000000000000000100; -- 					lw $4 4($0)	# ball_length

0619 : 00000000110001100100000000000000; -- 					add $3 $3 $4	# bottom_ball

0620 : 00000000110001100001000000000100; -- 					sub $3 $3 $1 	# bottom_ball - top_paddleR

0621 : 00110000100001100000000000001110; -- 					blt $2 $3 end_top_paddleL_interesect

0622 : 01000000010000000000000001111011; -- 					lw $1 123($0)	# ball y velocity

0623 : 00101000010000111111111111111101; -- 					addi $1 $1 -3 	# find new y velocity.

0624 : 01000000100000000000000000000111; -- 					lw $2 7($0) 	# paddle_max_yspeed

0625 : 00000000100000000010000000000100; -- 					sub $2 $0 $2	# min_yvel = -1*paddle_max_yspeed

0626 : 00110000100000100000000000000001; -- 					blt $2 $1 minimize_ball_yvel

0627 : 00001000000000000000001001111000; -- 					j reduce_ball_yvel

0628 : 01000000010000000000000000000111; -- 							lw $1 7($0) 	# paddle_max_yspeed

0629 : 00000000010000000001000000000100; -- 							sub $1 $0 $1	# min_yvel = -1*paddle_max_yspeed

0630 : 00111000010000000000000001111011; -- 							sw $1 123($0)

0631 : 00001000000000000000001001111100; -- 							j end_top_paddleL_interesect 

0632 : 01000000010000000000000001111011; -- 							lw $1 123($0)	# ball y velocity

0633 : 00101000010000111111111111111101; -- 							addi $1 $1 -3 	# find new y velocity.

0634 : 00111000010000000000000001111011; -- 							sw $1 123($0) 	# ball y velocity

0635 : 00001000000000000000001001111100; -- 							j end_top_paddleL_interesect

0636 : 01000000110000000000000001111010; -- 			lw $3 122($0)	# $3: Ball x velocity

0637 : 00110000110000011111111001111100; -- 			blt $3 $0 update_bx # If Ball x velocity is positive, keep positive. 

0638 : 00000001000000000011000000000100; -- 			sub $4 $0 $3 	# Negate x velocity

0639 : 00111001000000000000000001111010; -- 			sw $4 122($0)	# Store new x velocity into function. 

0640 : 00001000000000000000000011111010; -- 			j update_bx

0641 : 01000000010000000000000010000001; -- 				lw $1 129($0)	# top_paddleR

0642 : 01000000110000000000000000000110; -- 				lw $3 6($0)	# paddle_length

0643 : 00000000010001100001000000000000; -- 				add $1 $3 $1	# bottom_paddleR

0644 : 01000000100000000000000001111001; -- 				lw $2 121($0)	# top_ball

0645 : 00000000010000100010000000000100; -- 				sub $1 $1 $2	# bottom_paddleR - top_ball

0646 : 00000000110001100000000100010100; -- 				sra $3 $3 2		# paddle_length / 4

0647 : 00110000110000100000000000001100; -- 				blt $3 $1 end_bottom_paddleR_intersect	# paddle_length/4 > bottom_paddleR - top_ball

0648 : 01000000010000000000000001111011; -- 				lw $1 123($0)	# ball_old_yvel

0649 : 00101000010000100000000000000011; -- 				addi $1 $1 3 	# ball_new_yvel.

0650 : 01000000100000000000000000000111; -- 				lw $2 7($0) 	# paddle_max_yspeed

0651 : 00110000010001000000000000000001; -- 				blt $1 $2 pR_maximize_ball_yvel # ball_new_yvel > paddle_max_yspeed

0652 : 00001000000000000000001010010000; -- 				j pR_increase_ball_yvel

0653 : 01000000010000000000000000000111; -- 						lw $1 7($0)

0654 : 00111000010000000000000001111011; -- 						sw $1 123($0)

0655 : 00001000000000000000001010010100; -- 						j end_bottom_paddleR_intersect

0656 : 01000000010000000000000001111011; -- 						lw $1 123($0)	# ball y velocity

0657 : 00101000010000100000000000000011; -- 						addi $1 $1 3 	# find new y velocity.

0658 : 00111000010000000000000001111011; -- 						sw $1 123($0) 	# ball y velocity

0659 : 00001000000000000000001010010100; -- 						j end_bottom_paddleR_intersect

0660 : 01000000010000000000000010000001; -- 				lw $1 129($0)	# top_paddleR

0661 : 01000000100000000000000000000110; -- 				lw $2 6($0)	# paddle_length

0662 : 00000000100001000000000100010100; -- 				sra $2 $2 2 	# paddle_length/4

0663 : 01000000110000000000000001111001; -- 				lw $3 121($0)	# top_ball

0664 : 01000001000000000000000000000100; -- 				lw $4 4($0)	# ball_length

0665 : 00000000110001100100000000000000; -- 				add $3 $3 $4	# bottom_ball

0666 : 00000000110001100001000000000100; -- 				sub $3 $3 $1 	# bottom_ball - top_paddleR

0667 : 00110000100001100000000000001110; -- 				blt $2 $3 end_top_paddleR_interesect

0668 : 01000000010000000000000001111011; -- 					lw $1 123($0)	# ball y velocity

0669 : 00101000010000111111111111111101; -- 					addi $1 $1 -3 	# find new y velocity.

0670 : 01000000100000000000000000000111; -- 					lw $2 7($0) 	# paddle_max_yspeed

0671 : 00000000100000000010000000000100; -- 					sub $2 $0 $2	# min_yvel = -1*paddle_max_yspeed

0672 : 00110000100000100000000000000001; -- 					blt $2 $1 pR_minimize_ball_yvel

0673 : 00001000000000000000001010100110; -- 					j pR_reduce_ball_yvel

0674 : 01000000010000000000000000000111; -- 							lw $1 7($0) 	# paddle_max_yspeed

0675 : 00000000010000000001000000000100; -- 							sub $1 $0 $1	# min_yvel = -1*paddle_max_yspeed

0676 : 00111000010000000000000001111011; -- 							sw $1 123($0)

0677 : 00001000000000000000001010101010; -- 							j end_top_paddleR_interesect 

0678 : 01000000010000000000000001111011; -- 							lw $1 123($0)	# ball y velocity

0679 : 00101000010000111111111111111101; -- 							addi $1 $1 -3 	# find new y velocity.

0680 : 00111000010000000000000001111011; -- 							sw $1 123($0) 	# ball y velocity

0681 : 00001000000000000000001010101010; -- 							j end_top_paddleR_interesect

0682 : 01000000110000000000000001111010; -- 			lw $3 122($0)	# $3: Ball x velocity

0683 : 00110000000001111111111001001110; -- 			blt $0 $3 update_bx # If ball x velocity is negative, keep negative. 

0684 : 00000001000000000011000000000100; -- 			sub $4 $0 $3 	# Negate x velocity

0685 : 00111001000000000000000001111010; -- 			sw $4 122($0)	# Store new x velocity into function. 

0686 : 00001000000000000000000011111010; -- 			j update_bx

0687 : 01000000010000000000000001111011; -- 		lw $1 123($0)	# Ball y velocity

0688 : 00000000010000000001000000000100; -- 		sub $1 $0 $1	# Negate y velocity

0689 : 00111000010000000000000001111011; -- 		sw $1 123($0) 	# Insert new ball velocity into dmem

0690 : 00001000000000000000000100000110; -- 		j update_by

0691 : 01000000110000000000000001111011; -- 		lw $3 123($0)

0692 : 00110000000001111111111001010001; -- 		blt $0 $3 update_by

0693 : 00000000110000000011000000000100; -- 		sub $3 $0 $3 	

0694 : 00111000110000000000000001111011; -- 		sw $3 123($0)

0695 : 00001000000000000000000100000110; -- 		j update_by

0696 : 01000000110000000000000001111011; -- 		lw $3 123($0)

0697 : 00110000110000011111111001001100; -- 		blt $3 $0 update_by

0698 : 00000000110000000011000000000100; -- 		sub $3 $0 $3

0699 : 00111000110000000000000001111011; -- 		sw $3 123($0)

0700 : 00001000000000000000000100000110; -- 		j update_by

0701 : 01000000010000000000000001111101; -- 		lw $1 125($0) 	# paddleL_ypos

0702 : 01000000100000000000000001111111; -- 		lw $2 127($0) 	# paddleL_yvel

0703 : 00000000010000100010000000000000; -- 		add $1 $1 $2 	# paddle_newpos

0704 : 01000000100000000000000000000110; -- 		lw $2 6($0) 	# paddleL_length

0705 : 00000000110000100010000000000000; -- 		add $3 $1 $2 	# paddleL_bottom

0706 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0707 : 00110000110001000000000000000010; -- 		blt $3 $2 set_paddleL_bottomBound # if (paddleBottom > bottom_wall) {set paddle_b to hug bottom wall}

0708 : 00111000010000000000000001111101; -- 		sw $1 125($0)	# store new ypaddlePosition. 

0709 : 00001000000000000000000100011111; -- 		j end_move_paddleL

0710 : 01000000010000000000000000000110; -- 		lw $1 6($0) 	# paddle_length

0711 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0712 : 00000000100001000001000000000100; -- 		sub $2 $2 $1 	# lowest_paddle_y_pos

0713 : 00111000100000000000000001111101; -- 		sw $2 125($0)	# store new ypaddlePosition. 

0714 : 00001000000000000000000100011111; -- 		j end_move_paddleL

0715 : 01000000010000000000000001111101; -- 		lw $1 125($0) 	# paddleL_ypos

0716 : 01000000100000000000000001111111; -- 		lw $2 127($0) 	# paddleL_yvel

0717 : 00000000010000100010000000000100; -- 		sub $1 $1 $2 	# paddle_newpos

0718 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# top_wall

0719 : 00110000100000100000000000000010; -- 		blt $2 $1 set_paddleL_upperBound # if (topwall > paddle_newpos) {set paddle_t top top wall}

0720 : 00111000010000000000000001111101; -- 		sw $1 125($0)	# store new ypaddlePosition. 

0721 : 00001000000000000000000100011111; -- 		j end_move_paddleL

0722 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# upper_wall

0723 : 00111000100000000000000001111101; -- 		sw $2 125($0)	# store new ypaddlePosition. 

0724 : 00001000000000000000000100011111; -- 		j end_move_paddleL

0725 : 01000000010000000000000010000001; -- 		lw $1 129($0) 	# paddleL_ypos

0726 : 01000000100000000000000010000011; -- 		lw $2 131($0) 	# paddleL_yvel

0727 : 00000000010000100010000000000000; -- 		add $1 $1 $2 	# paddle_newpos

0728 : 01000000100000000000000000000110; -- 		lw $2 6($0) 	# paddleL_length

0729 : 00000000110000100010000000000000; -- 		add $3 $1 $2 	# paddleL_bottom

0730 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0731 : 00110000110001000000000000000010; -- 		blt $3 $2 set_paddleR_bottomBound # if (paddleBottom > bottom_wall) {set paddle_b to hug bottom wall}

0732 : 00111000010000000000000010000001; -- 		sw $1 129($0)	# store new ypaddlePosition. 

0733 : 00001000000000000000000100110100; -- 		j end_move_paddleR

0734 : 01000000010000000000000000000110; -- 		lw $1 6($0) 	# paddle_length

0735 : 01000000100000000000000000001010; -- 		lw $2 10($0)	# bottom_wall

0736 : 00000000100001000001000000000100; -- 		sub $2 $2 $1 	# lowest_paddle_y_pos

0737 : 00111000100000000000000010000001; -- 		sw $2 129($0)	# store new ypaddlePosition. 

0738 : 00001000000000000000000100110100; -- 		j end_move_paddleR

0739 : 01000000010000000000000010000001; -- 		lw $1 129($0) 	# paddleL_ypos

0740 : 01000000100000000000000010000011; -- 		lw $2 131($0) 	# paddleL_yvel

0741 : 00000000010000100010000000000100; -- 		sub $1 $1 $2 	# paddle_newpos

0742 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# top_wall

0743 : 00110000100000100000000000000010; -- 		blt $2 $1 set_paddleR_upperBound # if (topwall > paddle_newpos) {set paddle_t top top wall}

0744 : 00111000010000000000000010000001; -- 		sw $1 129($0)	# store new ypaddlePosition. 

0745 : 00001000000000000000000100110100; -- 		j end_move_paddleR

0746 : 01000000100000000000000000001001; -- 		lw $2 9($0)	# upper_wall

0747 : 00111000100000000000000010000001; -- 		sw $2 129($0)	# store new ypaddlePosition. 

0748 : 00001000000000000000000100110100; -- 		j end_move_paddleR

0749 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0750 : 00101000010000100000000000000101; -- 	addi $1 $1 5

0751 : 00101000100000000111111111111111; -- 	addi $2 $0 32767 # [14:0] mask

0752 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0753 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0754 : 00001000000000000000000001001110; -- j end_increment_pseudorandom_counter1

0755 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0756 : 00101000010000100000000000000110; -- 	addi $1 $1 6

0757 : 00101000100000000111111111111111; -- 	addi $2 $0 32767 # [14:0] mask

0758 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0759 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0760 : 00001000000000000000000001100111; -- j end_increment_pseudorandom_counter2

0761 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0762 : 00101000010000100000000000000001; -- 	addi $1 $1 1

0763 : 01000000110000000000000001111000; -- 	lw $3 120($0)

0764 : 00000000010001100001000000000000; -- 	add $1 $3 $1

0765 : 01000000110000000000000001111011; -- 	lw $3 123($0)

0766 : 00000000010001100001000000000000; -- 	add $1 $3 $1

0767 : 01000000110000000000000010010010; -- 	lw $3 146($0)

0768 : 00000000010001100001000000000000; -- 	add $1 $3 $1

0769 : 00101000100000000111111111111111; -- 	addi $2 $0 32767 # [14:0] mask

0770 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0771 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0772 : 00001000000000000000000010110100; -- j end_increment_pseudorandom_counter3

0773 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0774 : 00101000010000100000000000000001; -- 	addi $1 $1 1

0775 : 01000000100000000000000010001110; -- 	lw $2 142($0)

0776 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0777 : 01000000100000000000000010010000; -- 	lw $2 144($0)

0778 : 00000000010001000001000000000000; -- 	add $1 $2 $1	

0779 : 01000000100000000000000010010001; -- 	lw $2 145($0)

0780 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0781 : 01000000100000000000000010010010; -- 	lw $2 146($0)

0782 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0783 : 01000000100000000000000010010110; -- 	lw $2 150($0)

0784 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0785 : 00101000100000000111111111111111; -- 	addi $2 $0 32767

0786 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0787 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0788 : 00001000000000000000001000000010; -- j end_increment_pseudorandom_counter4

0789 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0790 : 00101000010000100000000000000010; -- 	addi $1 $1 2

0791 : 01000000100000000000000010001110; -- 	lw $2 142($0)

0792 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0793 : 01000000100000000000000010010000; -- 	lw $2 144($0)

0794 : 00000000010001000001000000000000; -- 	add $1 $2 $1	

0795 : 01000000100000000000000010010001; -- 	lw $2 145($0)

0796 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0797 : 01000000100000000000000010010010; -- 	lw $2 146($0)

0798 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0799 : 01000000100000000000000010010110; -- 	lw $2 150($0)

0800 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0801 : 00101000100000000111111111111111; -- 	addi $2 $0 32767

0802 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0803 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0804 : 00001000000000000000000111111101; -- j end_increment_pseudorandom_counter5

0805 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0806 : 00101000010000100000000000000011; -- 	addi $1 $1 3

0807 : 01000000100000000000000010001110; -- 	lw $2 142($0)

0808 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0809 : 01000000100000000000000010010000; -- 	lw $2 144($0)

0810 : 00000000010001000001000000000000; -- 	add $1 $2 $1	

0811 : 01000000100000000000000010010001; -- 	lw $2 145($0)

0812 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0813 : 01000000100000000000000010010010; -- 	lw $2 146($0)

0814 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0815 : 01000000100000000000000010010110; -- 	lw $2 150($0)

0816 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0817 : 00101000100000000111111111111111; -- 	addi $2 $0 32767

0818 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0819 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0820 : 00001000000000000000000111101101; -- j end_increment_pseudorandom_counter6

0821 : 01000000010000000000000010010100; -- 	lw $1 148($0)

0822 : 00101000010000100000000000000011; -- 	addi $1 $1 3

0823 : 01000000100000000000000010001110; -- 	lw $2 142($0)

0824 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0825 : 01000000100000000000000010010000; -- 	lw $2 144($0)

0826 : 00000000010001000001000000000000; -- 	add $1 $2 $1	

0827 : 01000000100000000000000010010001; -- 	lw $2 145($0)

0828 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0829 : 01000000100000000000000010010010; -- 	lw $2 146($0)

0830 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0831 : 01000000100000000000000010010110; -- 	lw $2 150($0)

0832 : 00000000010001000001000000000000; -- 	add $1 $2 $1

0833 : 00101000100000000111111111111111; -- 	addi $2 $0 32767

0834 : 00000000010001000001000000001000; -- 	and $1 $2 $1

0835 : 00111000010000000000000010010100; -- 	sw $1 148($0)

0836 : 00001000000000000000000111100010; -- j end_increment_pseudorandom_counter7
[0837..4095] : 00000000000000000000000000000000;
END;



