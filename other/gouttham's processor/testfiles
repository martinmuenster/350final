###############################################
		   Test Basic Functions 
###############################################


Test 1: Basic. Only addi. 
	addi $1, $0, 1;
	addi $2, $0, 2;
	addi $3, $0, 3;

	00101 00001 00000 00000000000000001
	00101 00010 00000 00000000000000010	
	00101 00011 00000 00000000000000011
	
	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00101000110000000000000000000011 ;
	END;

Test 2: No branching with immediate instructions and alu instructions. 
	0	addi 	$1, $0, 1;		00101 00001 00000 00000000000000001 				$1 = 1
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010 				$2 = 2, $1 = 1
	2	addi 	$3, $0, 3; 		00101 00011 00000 00000000000000011 				$3 = 3, $2 = 2, $1 = 1
	3 	addi 	$4, $0, 4;		00101 00100 00000 00000000000000100 				$4 = 4, $3 = 3, $2 = 2, $1 = 1
	4 	addi 	$20, $0, 20;	00101 10100 00000 00000000000010100 				$20 = 20, $4 = 4, $3 = 3, $2 = 2, $1 = 1
	5	add  	$5, $1, $2; 	00000 00101 00001 00010 00000 00000 00 				$5 = 3, $3 = 3, $2 = 2, $1 = 1
	6	sub  	$6, $1, $2;  	00000 00110 00001 00010 00000 00001 00 				$6 = -1, $5 = 3, $3 = 3, $2 = 2, $1 = 1
	7	sw 	 	$3, 4($2);      00111 00011 00010 00000000000000100 				$6 = -1, $5 = 3, $3 = 3, $2 = 2, $1 = 1   [6]=3
	8	bne 	$9, $10, 4;     00010 01001 01010 00000000000000100 				Don't branch
	9	blt 	$10, $11, 5;    00110 01010 01011 00000000000000101 				Don't branch
	10	lw 		$12, 4($2);  	01000 01100 00010 00000000000000100 				$12 = 3, $6 = 1, $5 = 5, $3 = 3, $2 = 2, $1 = 1   [6]=3

	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00101000110000000000000000000011 ;
	3 : 00101001000000000000000000000100 ;
	4 : 00101101000000000000000000010100 ;
	5 : 00000001010000100010000000000000 ;
	6 : 00000001100000100010000000000100 ;
	7 : 00111000110001000000000000000100 ;
	8 : 00010010010101000000000000000100 ;
	9 : 00110010100101100000000000000101 ;
	10 : 01000011000001000000000000000100 ;
	END;

Test 3: Test bne/blt
	
	0	addi 	$1, $0, 1;		00101 00001 00000 00000000000000001 
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010
	2	addi 	$3, $0, 3; 		00101 00011 00000 00000000000000011 				
	3 	addi 	$4, $0, 4;		00101 00100 00000 00000000000000100 
	4 	bne 	$1, $0, 0;  	00010 00001 00000 00000000000000000
	5	bne 	$1, $0, 2; 		00010 00001 00000 00000000000000010 				
	6	addi 	$3, $0, 3; 		00101 00011 00000 00000000000000011 				
	7 	addi 	$4, $0, 4;		00101 00100 00000 00000000000000100 				
	8 	blt 	$0, $1, -5;		00110 00000 00001 11111111111111011 				

	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00101000110000000000000000000011 ;
	3 : 00101001000000000000000000000100 ;
	4 : 00010000010000000000000000000000 ;
	5 : 00010000010000000000000000000010 ;
	6 : 00101000110000000000000000000011 ;
	7 : 00101001000000000000000000000100 ;
	8 : 00110000000000111111111111111011 ;
	END;
	
Test 4: Test simpler bne
	
	0	addi 	$1, $0, 1;		00101 00001 00000 00000000000000001 
	1	noop			 		00000000000000000000000000000000
	2	noop			 		00000000000000000000000000000000				
	3 	noop			 		00000000000000000000000000000000
	4 	noop			 		00000000000000000000000000000000
	5	bne 	$1, $0, 2; 		00010 00001 00000 00000000000000010 				
	6	addi 	$3, $0, 3; 		00101 00011 00000 00000000000000011 				
	7 	addi 	$4, $0, 4;		00101 00100 00000 00000000000000100 				
	8 	addi 	$1, $0, 1;		00101 00001 0000000000000000000001 				

	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00000000000000000000000000000000 ;
	2 : 00000000000000000000000000000000 ;
	3 : 00000000000000000000000000000000 ;
	4 : 00000000000000000000000000000000 ;
	5 : 00010000010000000000000000000010 ;
	6 : 00101000110000000000000000000011 ;
	7 : 00101001000000000000000000000100 ;
	8 : 00101000010000000000000000000001 ;
	END;

Test 5: Test j:
	0	addi 	$1, $0, 1;		00101 00001 00000 00000000000000001
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010
	2	addi 	$3, $0, 3; 		00101 00011 00000 00000000000000011
	3 	addi 	$4, $0, 4;		00101 00100 00000 00000000000000100
	4 	addi 	$5, $0, 5;		00101 00100 00000 00000000000000101
	5	j 		0				00001 0


	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00101000110000000000000000000011 ;
	3 : 00101001000000000000000000000100 ;
	4 : 00101001000000000000000000000101 ;
	5 : 00001000000000000000000000000000 ;
	END;

Test 6: jal
	0	addi 	$1, $0, 1;		00101 00001 00000 00000000000000001
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010
	2	jal 	4 				00011 00011 00000 00000000000000100
	3 	addi 	$4, $0, 4;		00101 00100 00000 00000000000000100
	4 	addi 	$5, $0, 5;		00101 00100 00000 00000000000000101


	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00011000000000000000000000000100 ;
	3 : 00101001000000000000000000000100 ;
	4 : 00101001000000000000000000000101 ;
	END;

Test 7: jal with jr
	0	addi 	$1, $0, 1;		00101 00001 00000 00000000000000001
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010
	2	jal 	4 				00011 00011 00000 00000000000000100
	3 	addi 	$4, $0, 4;		00101 00100 00000 00000000000000100
	4 	addi 	$5, $0, 5;		00101 00100 00000 00000000000000101
	5 	jr


	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00011000000000000000000000000100 ;
	3 : 00101001000000000000000000000100 ;
	4 : 00101001000000000000000000000101 ;
	5 : 00100111110000000000000000000000 ;
	END;



###############################################
			 Test Bypassing 
###############################################

Test 8: Test bypassing. -- simple

	0	addi 	$1, $0, 1;		00101 00001 00000 00000000000000001 				$1 = 1
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010 				$2 = 2, $1 = 1
	5	add  	$3, $1, $2; 	00000 00011 00001 00010 00000 00000 00 				$5 = 3, $3 = 3, $2 = 2, $1 = 1

	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101 00001 00000 00000000000000001 ;
	1 : 00101 00010 00000 00000000000000010 ;
	2 : 00000 00011 00001 00010 00000 00000 00 ;
	END;

Test 8: Test bypassing. -- complex

	0	addi 	$1, $0, 1;		00101 00001 00000 00000000000000001
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010
	2	sll 	$9, $2 1;		00000 01001 00010 00000 00001 00100 00
	3	add  	$5, $9, $2; 	00000 00101 01001 00010 00000 00000 00
	4	sw		$5, 0($3)		00111 00101	00011 00000000000000000
	5 	lw		$4 0($3)		01000 00100 00011 00000000000000000

	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00000010010001000000000010010000 ;
	3 : 00000001010100100010000000000000 ;
	4 : 00111001010001100000000000000000 ;
	5 : 01000001000001100000000000000000 ;
	END;

Test Stall Logic

	0	addi 	$4, $0, 12;		00101 00100 00000 00000000000001100
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010
	2	sll 	$9, $2 1;		00000 01001 00010 00000 00001 00100 00
	3	add  	$5, $9, $2; 	00000 00101 01001 00010 00000 00000 00
	4	sw		$5, 0($3)		00111 00101	00011 00000000000000000
	5 	lw		$4 0($3)		01000 00100 00011 00000000000000000
	6	add 	$6,$2,$4		00000 00100 00010 00100 00000 00000 00

	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101001000000000000000000001100 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00000010010001000000000010010000 ;
	3 : 00000001010100100010000000000000 ;
	4 : 00111001010001100000000000000000 ;
	5 : 01000001000001100000000000000000 ;
	6 : 00000001000001000100000000000000 ;
	END;

Test Stall Logic

	0	addi 	$4, $0, 12;		00101 00100 00000 00000000000001100
	1	addi 	$2, $0, 2; 		00101 00010 00000 00000000000000010
	2	sll 	$9, $2 1;		00000 01001 00010 00000 00001 00100 00
	3	add  	$5, $9, $2; 	00000 00101 01001 00010 00000 00000 00
	4	sw		$5, 0($3)		00111 00101	00011 00000000000000000
	5 	lw		$4 0($3)		01000 00100 00011 00000000000000000
	6	add 	$6,$2,$4		00000 00100 00010 00100 00000 00000 00

	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 00000000110000100010000000000000 ;
	3 : 00000001000000100011000000000000 ;
	END;

	0	addi $1 $0 1 	00101000010000000000000000000001
	1	addi $2 $0 2 	00101000100000000000000000000010
	2	add $3 $1 $2    00000000110000100010000000000000
	3	add $0 $0 $0    00000000000000000000000000000000
	4	add $4 $1 $3 	00000001000000100011000000000000

	00000 00100 00001 00011 00000 00000 00

Test Setx

	0	addi 	$4, $0, 12;		00101001000000000000000000001100
	1	addi 	$2, $0, 2; 		00101000100000000000000000000010
	2	setx 	9				10101 000000000000000000000001001
	3 	betx 	0				10110 000000000000000000000000000

	mif files:

	WIDTH = 32;
	DEPTH = 4096;
	ADDRESS_RADIX = DEC;
	DATA_RADIX = BIN;
	CONTENT BEGIN;
	0 : 00101000010000000000000000000001 ;
	1 : 00101000100000000000000000000010 ;
	2 : 10101000000000000000000000001001 ;
	3 : 10110000000000000000000000000000 ;
	END;